<?php

/**
 * Implements hook_menu().
 */

function mlmta_solo_forms_menu(){
  $items = array();
  $items['solo-registration/new'] = array(
    'title' => t('Solo registration form'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mlmta_piano_solo_form'),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'mlmta_solo.inc',
  );
  
  $items['ensemble-registration/new'] = array(
    'title' => t('Ensemble registration form'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mlmta_ensemble_form'),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'mlmta_ensemble.inc',
  );
  
  // These are taken care in the base module under mlmta-form/ path
  //$items['solo-form/%pursuit/edit'] = array(
  //  'title' => 'Piano solo form',
  //  'page callback' => 'mlmta_solo_forms_edit_router',
  //  'page arguments' => array(1),
  //  'access callback' => 'mlmta_solo_forms_edit_access_check',
  //  'access arguments' => array(1),
  //  'type' => MENU_CALLBACK,
  //);
  //
  //$items['solo-form/%pursuit/view'] = array(
  //  'title' => 'Piano solo registration',
  //  'page callback' => 'mlmta_solo_forms_page',
  //  'page arguments' => array(1),
  //  'access callback' => 'user_is_logged_in',
  //  'type' => MENU_CALLBACK,
  //);
  
  //$items['ensemble-form/%pursuit/edit'] = array(
  //  'title' => 'Ensemble/vocal form',
  //  'page callback' => 'dsmta_ensemble_forms_edit_router',
  //  'page arguments' => array(1),
  //  'access callback' => 'dsmta_ensemble_forms_edit_access_check',
  //  'access arguments' => array(1),
  //  'type' => MENU_CALLBACK,
  //);
  //
  //$items['ensemble-form/%pursuit/view'] = array(
  //  'title' => 'Ensemble/vocal registration',
  //  'page callback' => 'dsmta_ensemble_forms_page',
  //  'page arguments' => array(1),
  //  'access callback' => 'user_is_logged_in',
  //  'type' => MENU_CALLBACK,
  //);
  
  
  $items['admin/solo-form/%ctools_js/%pursuit/view'] = array(
    'title' => 'Piano solo registration',
    'page callback' => 'mlmta_solo_forms_modal_show',
    'page arguments' => array(2, 3),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  
  $items['admin/config/tenuto-registrations/manage/dsf-settings'] = array(
    'title' => 'DSF general settings',
    'description' => 'General settings for the DSF registration forms.',
    'access arguments' => array('create timeblock entities'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mlmta_solo_forms_configuration_form'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}


/**
 * Checks that user is able to edit paid pursuit
 */
function mlmta_solo_forms_edit_access_check($pursuit) {
  if (!user_is_logged_in()) {
    return FALSE;
  }
  $pursuit_wrapper = entity_metadata_wrapper('pursuit', $pursuit);
  if ($pursuit_wrapper->pursuit_order_paid->value() != 1) {
    return TRUE;
  }
  return user_access('edit paid pursuits');
}


/**
 * A router function for the edit form
 */
function mlmta_solo_forms_edit_router($pursuit) {
  switch ($pursuit->type) {
    case 'piano_solo':
      $form_id = 'mlmta_piano_solo_form';
      module_load_include('inc', 'mlmta_solo_forms', 'mlmta_solo');
      break;
  }
  return drupal_get_form($form_id, $pursuit);
}


/**
 * Implements hook_pursuit_calculate_trimmed_duration_alter().
 */
function mlmta_solo_forms_pursuit_calculate_trimmed_duration_alter(&$max_duration, $pursuit) {
  if (in_array($pursuit->type, array('piano_solo', 'vocal_ensemble_performance'))) {
    $max_duration = 15 * 60; 
  }
}

///** MOVED TO BASE
// * Implements hook_pursuit_update_name_alter().
// *
// */
//function mlmta_solo_forms_pursuit_update_name_alter(&$name, $pursuit) {
//  $wrapper = entity_metadata_wrapper('pursuit', $pursuit);
//  if ($wrapper->field_event_reference->raw() == variable_get('tenuto_solo_event')) {
//    if (isset($wrapper->field_accompanist) && !empty($wrapper->field_accompanist->value())) {
//      $accompanist_wrapper = $wrapper->field_accompanist; 
//      $name[] = $accompanist_wrapper->student_first_name->value() . ' ' . $accompanist_wrapper->student_last_name->value() . ' (acc.)';
//    } 
//  }
//}

/**
 * Implements template_preprocess_field()
 * Transform field_instrument_list multi-field into comma separated  (may need to do the same things with dsf theory and level for multiple players)
 */
function mlmta_solo_forms_preprocess_field(&$variables, $hook) {
  if (in_array($variables['element']['#field_name'], array('field_instrument_list','field_dsf_theory_test', 'field_dsf_theory_test_level'))) {
    $items = $variables['items'];
    $new_array = array();
    foreach($items as $item) {
      $new_array[] = $item['#markup'];
    }
    $comma_separated = implode(', ', $new_array);
    $variables['items'] = array(0 => array('#markup'=>$comma_separated));
  }
}


////////////  Display functions //////////////////


/**
 * Creates a render array of the pursuit with all relations
 */
function mlmta_solo_forms_page($pursuit) {
  list(, , $bundle) = entity_extract_ids('pursuit', $pursuit);
  $bundle_label = entity_get_info('pursuit')['bundles'][$bundle]['label'];
  drupal_set_title($bundle_label);
  return mlmta_solo_forms_multiple_page(array($pursuit));
}

/**
 * Builds and returns a renderable array for multiple pursuit. Built completely with students, teachers, accompanists, families and pieces
 */
function mlmta_solo_forms_multiple_page($pursuits) {
  $page = entity_view('pursuit', $pursuits, 'complete');
  return $page;
}


/**
 * Pursuit modal for admin callback
 */

/**
 * Show the content in a modal
 *
 * @param $ajax
 *    Flag for JavaScript enabled browser
 * @param $pursuit
 *    The pursuit to view
 */

function mlmta_solo_forms_modal_show($ajax, $pursuit){
    if ($pursuit->type == 'break') {
      if ($ajax) {
        ctools_include('modal');
        return ctools_modal_render('Nope','You cannot view or edit a break or placeholder.');
      } else{
       return 'You cannot view or edit a break or placeholder. Click the left arrow to go back to the previous page.';
      }
    }
    $page = mlmta_solo_forms_page($pursuit);
    if ($ajax) {
      //watchdog('checking ajax', 'is here');
      //ctools_include('ajax');
      ctools_include('modal');
      if (empty($page)) {
        return 'Error';
      }
      return ctools_modal_render('',$page);
    } else {
    // watchdog('checking ajax', 'is NOT here');
      return $page; 
    }
}




/**
 * Configuration form for mlmta solo
 */
function mlmta_solo_forms_configuration_form($form, &$form_state) {
  // Provide a default date in the format YYYY-MM-DD HH:MM:SS.
  $event_date = format_date(variable_get('tenuto_solo_event_date','1577854800'), 'custom', 'Y-m-d H:i:s');
  $deadline = format_date(variable_get('tenuto_solo_form_deadline','1577854800'), 'custom', 'Y-m-d H:i:s');
  $cutoff = format_date(variable_get('tenuto_solo_form_cutoff','1577854800'), 'custom', 'Y-m-d H:i:s');
  $format = "m-d-Y h:i A";

  $events = event_load_all();  
  if (user_access('administer event types')) {
    if (!empty($events)) {
      $options = array();
      foreach ($events as $id => $event) {
        $options[$id] = $events[$id]->title; 
      }
      
      $form['tenuto_solo_event'] = array(
        '#type' => 'select',
        '#title' => 'Event',
        '#description' => 'Choose an event from the list of defined events for this site, which will be linked to the DSF forms. This most likely will NOT need to be changed once it is set. Do NOT change this if you are not sure what it means',
        '#required' => TRUE,
        '#options' => $options,
        '#default_value' => variable_get('tenuto_solo_event',NULL),
      );
    } 
  }

  $form['tenuto_solo_chair_name'] = array(
    '#type' => 'textfield',
    '#title' => 'Chair name',
    '#description' => 'Enter the name of the event chair. For more than one chair, separate names with commas.',
    '#default_value' => variable_get('tenuto_solo_chair_name', NULL),
  );
  
  $form['tenuto_solo_chair_email_address'] = array(
    '#type' => 'textfield',
    '#title' => 'Chair email',
    '#description' => 'Enter the email address of the event chair. For more than one chair, separate email with commas.',
    '#default_value' => variable_get('tenuto_solo_chair_email_address', NULL),
  );
  
  $form['location_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Location'),
  );
  
  $form['location_fieldset']['tenuto_solo_event_location'] = array(
    '#type' => 'textarea',
    '#title' => t('Location for the DSF festival'),
    '#default_value' => variable_get('tenuto_solo_event_location', ''),
  );
  
  $form['event_date_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Date'),
  );
  $form['event_date_fieldset']['tenuto_solo_event_date'] = array(
     '#type' => 'date_select', 
     '#title' => t('Select a date for DSF festival'),
     '#description' => 'This is the date when the event will take place.',
     '#default_value' => $event_date, 
     '#date_format' => 'M-d-Y',
  );
  

  $form['deadline_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Deadline'),
  );
  $form['deadline_fieldset']['tenuto_solo_form_deadline'] = array(
     '#type' => 'date_select', 
     '#title' => t('Select a registration deadline for DSF festival'),
     '#description' => 'The forms will stop accepting registrations after this deadline.',
     '#default_value' => $deadline, 
     '#date_format' => $format,
  );
  
  $form['cutoff_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Cutoff'),
  );
  $form['cutoff_fieldset']['tenuto_solo_form_cutoff'] = array(
     '#type' => 'date_select', 
     '#title' => t('Select an age cutoff date for DSF festival'),
     '#description' => 'This is the date used to calculate the age of the student and the length of study with current teacher. Often this is either the same as the deadline, or the date of the event.',
     '#default_value' => $cutoff, 
     '#date_format' => $format,
  );
  
  $form['email_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Confirmation Email'),
  );
  
  $form['email_fieldset']['tenuto_solo_email_confirmation_text'] = array(
    '#type' => 'text_format',
    '#title' => t('Confirmation email text for DSF festival'),
    '#default_value' => variable_get('tenuto_solo_email_confirmation_text', ''),
    '#rows' => 9,
  );
  
  $form['scheduling_email_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Scheduling Email'),
  );
  $form['scheduling_email_fieldset']['tenuto_solo_email_scheduling_text'] = array(
    '#type' => 'text_format',
    '#title' => t('Scheduling email text for DSF festival'),
    '#default_value' => variable_get('tenuto_solo_email_scheduling_text', ''),
    '#rows' => 9,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#weight'=> 99,
  );
  return $form;
}
/**
 * Submit handler
 */
function mlmta_solo_forms_configuration_form_submit($form, &$form_state) {
  $uts = strtotime($form_state['values']['tenuto_solo_form_deadline']);
  $cutoff = strtotime($form_state['values']['tenuto_solo_form_cutoff']);
  $event_date = strtotime($form_state['values']['tenuto_solo_event_date']);
  
  variable_set('tenuto_solo_form_deadline', $uts);
  variable_set('tenuto_solo_form_cutoff', $cutoff);
  variable_set('tenuto_solo_event_date', $event_date);
  variable_set('tenuto_solo_event_location', $form_state['values']['tenuto_solo_event_location']);
  variable_set('tenuto_solo_email_confirmation_text', $form_state['values']['tenuto_solo_email_confirmation_text']['value']);
  variable_set('tenuto_solo_email_scheduling_text', $form_state['values']['tenuto_solo_email_scheduling_text']['value']);
  variable_set('tenuto_solo_chair_email_address', $form_state['values']['tenuto_solo_chair_email_address']);
  variable_set('tenuto_solo_chair_name', $form_state['values']['tenuto_solo_chair_name']);
  if (isset($form_state['values']['tenuto_solo_event'])) {
    variable_set('tenuto_solo_event', $form_state['values']['tenuto_solo_event']);
    $event = event_load($form_state['values']['tenuto_solo_event']);
    $event->cutoff = $cutoff;
    $event->deadline = $uts;
    $event_wrapper = entity_metadata_wrapper('event', $event);
    $event_wrapper->field_event_date = $event_date;
    $event_wrapper->field_event_location = $form_state['values']['tenuto_solo_event_location'];
    $event_wrapper->field_chair_name =  $form_state['values']['tenuto_solo_chair_name'];
    $event_wrapper->field_chair_email_address =  $form_state['values']['tenuto_solo_chair_email_address'];
    event_save($event);   
  }
  drupal_set_message(t('The settings have been saved.'));
}

/**
 * Implements hook_token_info().
 *
 * Creates token replacements for the solo site
 */
function mlmta_solo_forms_token_info() {
  $tokens = array();
  $tokens['tokens']['site']['tenuto-solo-event'] = array(
    'name' => t('Tenuto system event linked to the DSF forms'),
    'description' => t('The event ID linked to the DSF forms.'),
  );
  $tokens['tokens']['site']['tenuto-solo-email-confirmation-text'] = array(
    'name' => t('Tenuto system email confirmation text for the DSF festival'),
    'description' => t('Text to be inserted in the email confirmation above the order summary.'),
  );
  $tokens['tokens']['site']['tenuto-solo-email-scheduling-text'] = array(
    'name' => t('Tenuto system email scheduling text for the DSF festival'),
    'description' => t('Text to be inserted in the scheduling email above the order summary.'),
  );
  $tokens['tokens']['site']['tenuto-solo-form-deadline'] = array(
    'name' => t('Tenuto system form deadline for the DSF festival'),
    'description' => t('The deadline for a form, expressed as mm/dd/yy hh:mm AM.'),
  );
  // For continuity reasons, we are using "solo" but overloading this with dsf
  $tokens['tokens']['site']['tenuto-solo-event_date'] = array(
    'name' => t('Tenuto system date for the DSF festival'),
    'description' => t('The date for the DSF festival.'),
  );
  $tokens['tokens']['site']['tenuto-dsf-event_date'] = array(
    'name' => t('Tenuto system date for the DSF festival'),
    'description' => t('The date for the DSF festival.'),
  );
  $tokens['tokens']['site']['tenuto-solo-event_location'] = array(
    'name' => t('Tenuto system location for the DSF festival'),
    'description' => t('The location for the DSF festival.'),
  );
  $tokens['tokens']['site']['tenuto-dsf-event_location'] = array(
    'name' => t('Tenuto system location for the DSF festival'),
    'description' => t('The location for the DSF festival.'),
  );
  $tokens['tokens']['site']['tenuto-dsf-chair-name'] = $tokens['tokens']['site']['tenuto-solo-chair-name'] = array(
    'name' => t('Tenuto system DSF chair name'),
    'description' => t('The chair name for the Student Recital.'),
  );
  $tokens['tokens']['site']['tenuto-dsf-chair-email-address'] = $tokens['tokens']['site']['tenuto-solo-chair-email-address'] = array(
    'name' => t('Tenuto system DSF chair email'),
    'description' => t('The chair email for the Student Recital.'),
  );
  return $tokens;
}

/**
 * Implements hook_tokens()
 * Provides value for token
 */
function mlmta_solo_forms_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'site') {
    $sanitize = !empty($options['sanitize']);
    // Loop through the available tokens.
    foreach ($tokens as $name => $original) {
      dpm($name); switch ($name) {
        case 'tenuto-solo-email-confirmation-text':
          $value = variable_get('tenuto_solo_email_confirmation_text','');
          $value = $sanitize ? filter_xss(token_replace($value)) : token_replace($value);
          $replacements[$original] = $value;
          break;
        case 'tenuto-solo-email-scheduling-text':
          $value = variable_get('tenuto_solo_email_scheduling_text','');
          $value = $sanitize ? filter_xss(token_replace($value)) : token_replace($value);
          $replacements[$original] = $value;
          break;
        case 'tenuto-solo-form-deadline':
          $value = format_date(variable_get('tenuto_solo_form_deadline','1577854800'), 'custom', 'm/d/Y h:i A');
          $replacements[$original] = $value;
          break;
        case 'tenuto-solo-event':
          $value = variable_get('tenuto_solo_event', 0);
          $replacements[$original] = $value;
          break;
        case 'tenuto-solo-event-date':
        case 'tenuto-dsf-event-date':
          $value = format_date(variable_get('tenuto_solo_event_date','1577854800'), 'custom', 'm/d/Y');
          $replacements[$original] = $value;
          break;
        case 'tenuto-solo-event-location':
        case 'tenuto-dsf-event-location':
          $value = variable_get('tenuto_solo_event_location','');
          $value = $sanitize ? filter_xss($value) : $value;
          $replacements[$original] = $value;
          break;
        case 'tenuto-dsf-chair-name':
        case 'tenuto-solo-chair-name':
          $value = variable_get('tenuto_solo_chair_name', '');
          $value = $sanitize ? filter_xss($value) : $value;
          $replacement[$original] = $value;
          break;
        case 'tenuto-dsf-chair-email-address':
        case 'tenuto-solo-chair-email-address':
          $value = variable_get('tenuto_solo_chair_email_address', '');
          $value = $sanitize ? filter_xss($value) : $value;
          $replacement[$original] = $value;
          break; 
      }
    }
    return $replacements;
  }
}

/**
 * Implements hook_message_presave().
 *
 * Embeds a view in the notification email for solo registrations
 */

function mlmta_solo_forms_message_presave($message) {
  if (!empty($message->mid) || $message->type != 'commerce_order_order_confirmation' ) {
    return;
  }

  $message->arguments['!dsf-order-summary'] = array(
    'callback' => 'mlmta_solo_forms_message_order_summary',
    'pass message' => TRUE,
  );
}

/**
 * Message solo callback; Show order summary.
 *
 * @param Message $message
 *   The Message entity.
 *
 * @return string
 *   The output of the View.
 */
function mlmta_solo_forms_message_order_summary(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);
  $view = views_get_view('shopping_cart_complete_summary'); 
  $view->set_display('dsf');
  $view->set_arguments(array($wrapper->message_commerce_order->getIdentifier()));
  $view->hide_admin_links = TRUE;

  // Disable SQL query rewrite so this renders properly for token.
  // @link https://www.drupal.org/node/1895418
  // This line doesn't seem to work for non-admins! I had to manually disable SQL rewrite for the views
  $view->display['solo']->display_options['query']['options']['disable_sql_rewrite'] = TRUE;

  return $view->preview();
}

/**
 * Creates a map of theory test types
 */
function mlmta_solo_forms_theory_types() {
  return drupal_map_assoc(array(
    'Treble clef',
    'Alto clef',
    'Bass clef',
    'Piano',
    'Guitar',
    'Vocal treble clef',
    'Vocal bass clef',
  ));
}
/**
 * Creates a map of theory test levels
 */
function mlmta_solo_forms_theory_levels() {
  return drupal_map_assoc(array(
    'P',
    '1',
    '2',
    '3',
    '4','5' , '6' ,'7', '8',
  ));
}

/**
 * Creates a map of instruments
 */
function mlmta_solo_forms_instruments() {
  return drupal_map_assoc(array(
    'Piano', 'Voice', 'Violin', 'Viola', 'Cello', 'Bass', 'Guitar', 'Harp', 'Flute', 'Oboe', 'Clarinet', 'Bassoon', 'French horn', 'English horn', 'Saxophone' ,'Trumpet', 'Trombone', 'Euphonium', 'Tuba', 'Percussion', 'Marimba', 'Vibraphone',  
  ));
}
