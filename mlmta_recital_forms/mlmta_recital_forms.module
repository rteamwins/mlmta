<?php

/**
 * Implements hook_menu().
 */

function mlmta_recital_forms_menu(){
  $items = array();
  $items['recital-solo-registration/new'] = array(
    'title' => t('Recital solo registration form'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mlmta_recital_solo_form'),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'mlmta_recital_solo.inc',
  );
  
  $items['recital-ensemble-registration/new'] = array(
    'title' => t('Recital ensemble registration form'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mlmta_recital_ensemble_form'),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'mlmta_recital_ensemble.inc',
  );
  
  // These are taken care in the base module under mlmta-form/ path
  //$items['solo-form/%pursuit/edit'] = array(
  //  'title' => 'Piano solo form',
  //  'page callback' => 'mlmta_recital_forms_edit_router',
  //  'page arguments' => array(1),
  //  'access callback' => 'mlmta_recital_forms_edit_access_check',
  //  'access arguments' => array(1),
  //  'type' => MENU_CALLBACK,
  //);
  //
  //$items['solo-form/%pursuit/view'] = array(
  //  'title' => 'Piano solo registration',
  //  'page callback' => 'mlmta_recital_forms_page',
  //  'page arguments' => array(1),
  //  'access callback' => 'user_is_logged_in',
  //  'type' => MENU_CALLBACK,
  //);
  
  //$items['ensemble-form/%pursuit/edit'] = array(
  //  'title' => 'Ensemble/vocal form',
  //  'page callback' => 'dsmta_ensemble_forms_edit_router',
  //  'page arguments' => array(1),
  //  'access callback' => 'dsmta_ensemble_forms_edit_access_check',
  //  'access arguments' => array(1),
  //  'type' => MENU_CALLBACK,
  //);
  //
  //$items['ensemble-form/%pursuit/view'] = array(
  //  'title' => 'Ensemble/vocal registration',
  //  'page callback' => 'dsmta_ensemble_forms_page',
  //  'page arguments' => array(1),
  //  'access callback' => 'user_is_logged_in',
  //  'type' => MENU_CALLBACK,
  //);
  
  
  $items['admin/recital-form/%ctools_js/%pursuit/view'] = array(
    'title' => 'Piano solo registration',
    'page callback' => 'mlmta_recital_forms_modal_show',
    'page arguments' => array(2, 3),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  
  $items['admin/config/tenuto-registrations/manage/recital-settings'] = array(
    'title' => 'Recital general settings',
    'description' => 'General settings for the recital forms.',
    'access arguments' => array('create timeblock entities'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mlmta_recital_forms_configuration_form'),
    'type' => MENU_NORMAL_ITEM,
   );

    $items['admin/download-program'] = array(
      'title' => 'Download recital program',
      'description' => 'Generates an html snipped with a table downloaded as a doc file.',
      'access arguments' => array('create timeblock entities'),
      'page callback' => 'mlmta_recital_output_program',
      'type' => MENU_CALLBACK,
    );
  return $items;
}


/**
 * Checks that user is able to edit paid pursuit
 */
function mlmta_recital_forms_edit_access_check($pursuit) {
  if (!user_is_logged_in()) {
    return FALSE;
  }
  $pursuit_wrapper = entity_metadata_wrapper('pursuit', $pursuit);
  if ($pursuit_wrapper->pursuit_order_paid->value() != 1) {
    return TRUE;
  }
  return user_access('edit paid pursuits');
}

// Base module

///**
// * A router function for the edit form
// */
//function mlmta_recital_forms_edit_router($pursuit) {
//  switch ($pursuit->type) {
//    case 'piano_solo':
//      $form_id = 'mlmta_piano_solo_form';
//      module_load_include('inc', 'mlmta_recital_forms', 'mlmta_recital');
//      break;
//  }
//  return drupal_get_form($form_id, $pursuit);
//}


/**
 * Implements hook_pursuit_calculate_trimmed_duration_alter().
 */
function mlmta_recital_forms_pursuit_calculate_trimmed_duration_alter(&$max_duration, $pursuit) {
  if (in_array($pursuit->type, array('recital_solo', 'recital_ensemble'))) {
    $max_duration = 10 * 60; 
  }
}

///** MOVED TO BASE
// * Implements hook_pursuit_update_name_alter().
// *
// */
//function mlmta_recital_forms_pursuit_update_name_alter(&$name, $pursuit) {
//  $wrapper = entity_metadata_wrapper('pursuit', $pursuit);
//  if (isset($wrapper->field_accompanist) && !empty($wrapper->field_accompanist->value())) {
//    $accompanist_wrapper = $wrapper->field_accompanist; 
//    $name[] = $accompanist_wrapper->student_first_name->value() . ' ' . $accompanist_wrapper->student_last_name->value() . ' (acc.)';
//  }
//}

/**
 * Implements template_preprocess_field()
 * Transform field_instrument_list multi-field into comma separated  (may need to do the same things with dsf theory and level for multiple players)
 */
//function mlmta_recital_forms_preprocess_field(&$variables, $hook) {
//  if (in_array($variables['element']['#field_name'], array('field_instrument_list','field_dsf_theory_test', 'field_dsf_theory_test_level'))) {
//    $items = $variables['items'];
//    $new_array = array();
//    foreach($items as $item) {
//      $new_array[] = $item['#markup'];
//    }
//    $comma_separated = implode(', ', $new_array);
//    $variables['items'] = array(0 => array('#markup'=>$comma_separated));
//  }
//}


////////////  Display functions //////////////////


/**
 * Creates a render array of the pursuit with all relations
 */
function mlmta_recital_forms_page($pursuit) {
  list(, , $bundle) = entity_extract_ids('pursuit', $pursuit);
  $bundle_label = scheduling_bundle_label('pursuit', $bundle);
  drupal_set_title($bundle_label);
  return mlmta_recital_forms_multiple_page(array($pursuit));
}

/**
 * Builds and returns a renderable array for multiple pursuit. Built completely with students, teachers, accompanists, families and pieces
 */
function mlmta_recital_forms_multiple_page($pursuits) {
  $page = entity_view('pursuit', $pursuits, 'complete');
  return $page;
}


/**
 * Pursuit modal for admin callback
 */

/**
 * Show the content in a modal
 *
 * @param $ajax
 *    Flag for JavaScript enabled browser
 * @param $pursuit
 *    The pursuit to view
 */

function mlmta_recital_forms_modal_show($ajax, $pursuit){
    if ($pursuit->type == 'break') {
      if ($ajax) {
        ctools_include('modal');
        return ctools_modal_render('Nope','You cannot view or edit a break or placeholder.');
      } else{
       return 'You cannot view or edit a break or placeholder. Click the left arrow to go back to the previous page.';
      }
    }
    $page = mlmta_recital_forms_page($pursuit);
    if ($ajax) {
      //watchdog('checking ajax', 'is here');
      //ctools_include('ajax');
      ctools_include('modal');
      if (empty($page)) {
        return 'Error';
      }
      return ctools_modal_render('',$page);
    } else {
    // watchdog('checking ajax', 'is NOT here');
      return $page; 
    }
}




/**
 * Configuration form for mlmta solo
 */
function mlmta_recital_forms_configuration_form($form, &$form_state) {
  // Provide a default date in the format YYYY-MM-DD HH:MM:SS.
  $event_date = format_date(variable_get('tenuto_recital_event_date','1577854800'), 'custom', 'Y-m-d H:i:s');
  $deadline = format_date(variable_get('tenuto_recital_form_deadline','1577854800'), 'custom', 'Y-m-d H:i:s');
  $cutoff = format_date(variable_get('tenuto_recital_form_cutoff','1577854800'), 'custom', 'Y-m-d H:i:s');
  $format = "m-d-Y h:i A";
  
  $events = event_load_all();
  if (user_access('administer event types')) {
    if (!empty($events)) {
  
      $options = array();
      foreach ($events as $id => $event) {
        $options[$id] = $events[$id]->title; 
      }
      
      $form['tenuto_recital_event'] = array(
        '#type' => 'select',
        '#title' => 'Event',
        '#description' => 'Choose an event from the list of defined events for this site, which will be linked to the DSF forms. This most likely will NOT need to be changed once it is set. Do NOT change this if you are not sure what it means',
        '#required' => TRUE,
        '#options' => $options,
        '#default_value' => variable_get('tenuto_recital_event',NULL),
      );
    }
  }

  $form['tenuto_recital_chair_name'] = array(
    '#type' => 'textfield',
    '#title' => 'Chair name',
    '#description' => 'Enter the name of the event chair. For more than one chair, separate names with commas.',
    '#default_value' => variable_get('tenuto_recital_chair_name', NULL),
  );
  
  $form['tenuto_recital_chair_email_address'] = array(
    '#type' => 'textfield',
    '#title' => 'Chair email',
    '#description' => 'Enter the email address of the event chair. For more than one chair, separate email with commas.',
    '#default_value' => variable_get('tenuto_recital_chair_email_address', NULL),
  );
  
  $form['location_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Location'),
  );
  
  $form['location_fieldset']['tenuto_recital_event_location'] = array(
    '#type' => 'textarea',
    '#title' => t('Location for the Student Recital'),
    '#default_value' => variable_get('tenuto_recital_event_location', ''),
  );
  
  $form['event_date_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Date'),
  );
  $form['event_date_fieldset']['tenuto_recital_event_date'] = array(
     '#type' => 'date_select', 
     '#title' => t('Select a date for Student Recital'),
     '#description' => 'This is the date when the event will take place.',
     '#default_value' => $event_date, 
     '#date_format' => 'm-d-Y',
  );
  
  $form['deadline_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Deadline'),
  );
  $form['deadline_fieldset']['tenuto_recital_form_deadline'] = array(
     '#type' => 'date_select', 
     '#title' => t('Select a registration deadline for recital'),
     '#description' => 'The forms will stop accepting registrations after this deadline.',
     '#default_value' => $deadline, 
     '#date_format' => $format,
  );
  
  $form['cutoff_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Cutoff'),
  );
  $form['cutoff_fieldset']['tenuto_recital_form_cutoff'] = array(
     '#type' => 'date_select', 
     '#title' => t('Select an age cutoff date for recital'),
     '#description' => 'This is the date used to calculate the age of the student and the length of study with current teacher. Often this is either the same as the deadline, or the date of the event.',
     '#default_value' => $cutoff, 
     '#date_format' => $format,
  );
  
  $form['email_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Confirmation Email'),
  );
  
  $form['email_fieldset']['tenuto_recital_email_confirmation_text'] = array(
    '#type' => 'text_format',
    '#title' => t('Confirmation email text for recital'),
    '#default_value' => variable_get('tenuto_recital_email_confirmation_text', ''),
    '#rows' => 9,
  );
  
  $form['scheduling_email_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Scheduling Email'),
  );
  $form['scheduling_email_fieldset']['tenuto_recital_email_scheduling_text'] = array(
    '#type' => 'text_format',
    '#title' => t('Scheduling email text for recital'),
    '#default_value' => variable_get('tenuto_recital_email_scheduling_text', ''),
    '#rows' => 9,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#weight'=> 99,
  );
  return $form;
}
/**
 * Submit handler
 */
function mlmta_recital_forms_configuration_form_submit($form, &$form_state) {
  $uts = strtotime($form_state['values']['tenuto_recital_form_deadline']);
  $cutoff = strtotime($form_state['values']['tenuto_recital_form_cutoff']);
  $event_date = strtotime($form_state['values']['tenuto_recital_event_date']);
  
  variable_set('tenuto_recital_form_deadline', $uts);
  variable_set('tenuto_recital_form_cutoff', $cutoff);
  variable_set('tenuto_recital_event_date', $event_date);
  variable_set('tenuto_recital_event_location', $form_state['values']['tenuto_recital_event_location']);
  variable_set('tenuto_recital_email_confirmation_text', $form_state['values']['tenuto_recital_email_confirmation_text']['value']);
  variable_set('tenuto_recital_email_scheduling_text', $form_state['values']['tenuto_recital_email_scheduling_text']['value']);
  variable_set('tenuto_recital_chair_email_address', $form_state['values']['tenuto_recital_chair_email_address']);
  variable_set('tenuto_recital_chair_name', $form_state['values']['tenuto_recital_chair_name']);
  
  if (isset($form_state['values']['tenuto_recital_event'])) {
    variable_set('tenuto_recital_event', $form_state['values']['tenuto_recital_event']);
    $event = event_load($form_state['values']['tenuto_recital_event']);
    $event->cutoff = $cutoff;
    $event->deadline = $uts;
    $event_wrapper = entity_metadata_wrapper('event', $event);
    $event_wrapper->field_event_date = $event_date;
    $event_wrapper->field_event_location = $form_state['values']['tenuto_recital_event_location'];
    $event_wrapper->field_chair_name =  $form_state['values']['tenuto_recital_chair_name'];
    $event_wrapper->field_chair_email_address =  $form_state['values']['tenuto_recital_chair_email_address'];
    event_save($event);   
  }
  drupal_set_message(t('The settings have been saved.'));
}

/**
 * Implements hook_token_info().
 *
 * Creates token replacements for the solo site
 */
function mlmta_recital_forms_token_info() {
  $tokens = array();
  $tokens['tokens']['site']['tenuto-recital-event'] = array(
    'name' => t('Tenuto system event linked to the DSF forms'),
    'description' => t('The event ID linked to the DSF forms.'),
  );
  $tokens['tokens']['site']['tenuto-recital-email-confirmation-text'] = array(
    'name' => t('Tenuto system email confirmation text for the recital'),
    'description' => t('Text to be inserted in the email confirmation above the order summary.'),
  );
  $tokens['tokens']['site']['tenuto-recital-email-scheduling-text'] = array(
    'name' => t('Tenuto system email scheduling text for the recital'),
    'description' => t('Text to be inserted in the scheduling email above the order summary.'),
  );
  $tokens['tokens']['site']['tenuto-recital-form-deadline'] = array(
    'name' => t('Tenuto system form deadline for the recital'),
    'description' => t('The deadline for a form, expressed as mm/dd/yy hh:mm AM.'),
  );
  $tokens['tokens']['site']['tenuto-recital-event_date'] = array(
    'name' => t('Tenuto system date for the Student Recital'),
    'description' => t('The date for the Student Recital.'),
  );
  $tokens['tokens']['site']['tenuto-recital-event_location'] = array(
    'name' => t('Tenuto system location for the Student Recital'),
    'description' => t('The location for the Student Recital.'),
  );
  $tokens['tokens']['site']['tenuto-recital-chair-name'] = array(
    'name' => t('Tenuto system Student Recital chair name'),
    'description' => t('The chair name for the Student Recital.'),
  );
  $tokens['tokens']['site']['tenuto-recital-chair-email-address'] = array(
    'name' => t('Tenuto system Student Recital chair email'),
    'description' => t('The chair email for the Student Recital.'),
  );
  return $tokens;
}

/**
 * Implements hook_tokens()
 * Provides value for token
 */
function mlmta_recital_forms_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'site') {
    $sanitize = !empty($options['sanitize']);
    // Loop through the available tokens.
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'tenuto-recital-email-confirmation-text':
          $value = variable_get('tenuto_recital_email_confirmation_text','');
          $value = $sanitize ? filter_xss(token_replace($value)) : token_replace($value);
          $replacements[$original] = $value;
          break;
        case 'tenuto-recital-email-scheduling-text':
          $value = variable_get('tenuto_recital_email_scheduling_text','');
          $value = $sanitize ? filter_xss(token_replace($value)) : token_replace($value);
          $replacements[$original] = $value;
          break;
        case 'tenuto-recital-form-deadline':
          $value = format_date(variable_get('tenuto_recital_form_deadline','1577854800'), 'custom', 'm/d/Y h:i A');
          $replacements[$original] = $value;
          break;
        case 'tenuto-recital-event':
          $value = variable_get('tenuto_recital_event', 0);
          $replacements[$original] = $value;
          break;
        case 'tenuto-recital-event-date':
          $value = format_date(variable_get('tenuto_recital_event_date','1577854800'), 'custom', 'm/d/Y');
          $replacements[$original] = $value;
          break;
        case 'tenuto-recital-event-location':
          $value = variable_get('tenuto_recital_event_location','');
          $value = $sanitize ? filter_xss($value) : $value;
          $replacements[$original] = $value;
          break;
        case 'tenuto-recital-chair-name':
          $value = variable_get('tenuto_recital_chair_name', '');
          $value = $sanitize ? filter_xss($value) : $value;
          $replacements[$original] = $value;
          break;
        case 'tenuto-recital-chair-email-address':
          $value = variable_get('tenuto_recital_chair_email_address', '');
          $value = $sanitize ? filter_xss($value) : $value;
          $replacements[$original] = $value;
          break;        
      }
    }
    return $replacements;
  }
}

/**
 * Implements hook_message_presave().
 *
 * Embeds a view in the notification email for solo registrations
 */

function mlmta_recital_forms_message_presave($message) {
  if (!empty($message->mid) || $message->type != 'commerce_order_recital_confirmation' ) {
    return;
  }

  $message->arguments['!recital-order-summary'] = array(
    'callback' => 'mlmta_recital_forms_message_order_summary',
    'pass message' => TRUE,
  );
}

/**
 * Message solo callback; Show order summary.
 *
 * @param Message $message
 *   The Message entity.
 *
 * @return string
 *   The output of the View.
 */
function mlmta_recital_forms_message_order_summary(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);
  $view = views_get_view('shopping_cart_complete_summary'); 
  $view->set_display('recital');
  $view->set_arguments(array($wrapper->message_commerce_order->getIdentifier()));
  $view->hide_admin_links = TRUE;

  // Disable SQL query rewrite so this renders properly for token.
  // @link https://www.drupal.org/node/1895418
  // This line doesn't seem to work for non-admins! I had to manually disable SQL rewrite for the views
  $view->display['recital']->display_options['query']['options']['disable_sql_rewrite'] = TRUE;

  return $view->preview();
}


/**
 * Creates a map of instruments
 */
function mlmta_recital_forms_instruments() {
  return drupal_map_assoc(array(
    'Piano', 'Voice', 'Violin', 'Viola', 'Cello', 'Bass', 'Guitar', 'Harp', 'Flute', 'Oboe', 'Clarinet', 'Bassoon', 'French horn', 'English horn', 'Saxophone' ,'Trumpet', 'Trombone', 'Euphonium', 'Tuba', 'Percussion', 'Marimba', 'Vibraphone',  
  ));
}

/**
 * Outputs a html file with .doc extension. Outputs the student recital program
 */
function mlmta_recital_output_program() {
  $content = views_embed_view('mlmta_recital_program','page');
  //add necessary headers for browsers
  $filename = 'RecitalProgram-'.date('Ymd-Hi').'.doc';
  drupal_add_http_header('Content-Type', 'application/vnd.ms-word; utf-8'); 
//  drupal_add_http_header("Cache-Control: must-revalidate, post-check=0, pre-check=0"); 
  drupal_add_http_header('Content-Disposition',  'attachment;filename= "'.$filename.'"');
  print $content;
  drupal_exit();
}

/**
 * Checks recital registrations by teacher to detect if there are more than 4 registrations and more than 10 minutes of length
 */
function mlmta_recital_check_teacher_limits($pursuit) {
  $pursuit_wrapper = entity_metadata_wrapper('pursuit', $pursuit);
  $teacher_id = $pursuit_wrapper->pursuit_teacher_reference[0]->raw();
  $total_time = 0; // in seconds
  $q = new EntityFieldQuery();
  $q->entityCondition('entity_type', 'pursuit');
  $q->entityCondition('bundle', array('recital_solo','recital_ensemble'), 'IN');
  $q->fieldCondition('pursuit_teacher_reference','target_id',$teacher_id);
  $r = $q->execute();
  if (empty($r['pursuit'])) {
    return ;
  }
  $pursuit_ids = array_keys($r['pursuit']);
  $loaded_pursuits = pursuit_load_multiple($pursuit_ids);
  foreach ($loaded_pursuits as $loaded_pursuit) {
    $loaded_wrapper = entity_metadata_wrapper('pursuit', $loaded_pursuit);
    $total_time += $loaded_wrapper->pursuit_trimmed_duration->value();
  }
  $number_flag = FALSE;
  $time_flag = FALSE;
  if (count($pursuit_ids) > 3) {
    $number_flag = TRUE;
    drupal_set_message(t('You have registered more than 4 students in this recital. An email has been sent to the chair to alert her/him about this situation. Please get in touch with the chair to clarify.'), 'warning');
  }
  if ($total_time > 600) {
    drupal_set_message(t('You have registered students whose pieces exceed the 10 minute maximum length for this recital. An email has been sent to the chair to alert her/him about this situation. Please get in touch with the chair to clarify.'), 'warning');
    $time_flag = TRUE;
  }

  if ($time_flag || $number_flag) {
    $body[] = "
Student recital chair:

This is an automated notice to indicate that a registrant for the MLMTA Student Recitals has exceeded the maximum number of students or length. Additional information below

-- The MLMTA registration system 
  ";
  
    if ($number_flag) {
      $body[] = 'Teacher: ' . $pursuit_wrapper->pursuit_teacher_reference[0]->label();
      $body[] = 'Has exceeded the maximum number of students. Currently this teacher has registered '. (count($pursuit_ids) + 1) .' students.';
    }
    
    if ($time_flag) {
      $body[] = 'Teacher: ' . $pursuit_wrapper->pursuit_teacher_reference[0]->label();
      $body[] = 'Has exceeded the maximum number of minutes. Currently this teacher has registered pieces for '. ($total_time/60) .' minutes.';
    }
  
    $params = array(
      'key' => 'send_personnel_schedule',
      'subject' => 'MLMTA Recital Chair automated notice: teacher has exceeded recital limits',
      'body' => $body,
      'language' => 'und',
    );
    
    $chair_email = !empty(variable_get('tenuto_recital_chair_email_address')) ? variable_get('tenuto_recital_chair_email_address') : 'acremaschi@tenutoweb.com';
    drupal_mail('personnel', 'send_personnel_schedule', $chair_email, 'und', $params);   // add the email of the chair or define a way to do this
  }
}

/**
 * Implements hook_mail().
 */
function mlmta_recital_mail($key, &$message, $params) {
  if ($key == 'send_recital_chair_warning') {
    $message['subject'] = $params['subject'];
    $message['body'] = $params['body'];
    $message['headers']['Cc'] =  'acremaschi@tenutoweb.com'; 
  }
}
