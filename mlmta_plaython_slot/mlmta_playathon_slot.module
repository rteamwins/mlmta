<?php

/**
 * Implements hook_entity_info().
 */
function mlmta_playathon_slot_entity_info() {
  $return = array(
    'mlmta_playathon_slot' => array(
      'label' => t('PlayathonSlot'),
      'entity class' => 'PlayathonSlot',
      'controller class' => 'PlayathonSlotController',
      'base table' => 'mlmta_playathon_slot',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'mlmta_playathon_slot_id',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'mlmta_playathon_slot_load',
      'view modes' => array(
        'partial' => array(
          'label' => t('Partial'),
          'custom settings' => TRUE,
        ),
        'default' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'mlmta_playathon_slot',
      'access callback' => 'mlmta_playathon_slot_access',
    ),
  );
  $return['mlmta_playathon_slot_type'] = array(
    'label' => t('PlayathonSlot Type'),
    'entity class' => 'PlayathonSlotType',
    'controller class' => 'PlayathonSlotTypeController',
    'base table' => 'mlmta_playathon_slot_type',
    'fieldable' => FALSE,
    'bundle of' => 'mlmta_playathon_slot',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'module' => 'mlmta_playathon_slot',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/scheduling/mlmta-playathon-slot-types',
      'file' => 'mlmta_playathon_slot.admin.inc',
      'controller class' => 'PlayathonSlotTypeUIController',
    ),
    'access callback' => 'mlmta_playathon_slot_type_access',
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function mlmta_playathon_slot_entity_info_alter(&$entity_info) {
  foreach (mlmta_playathon_slot_types() as $type => $info) {
    $entity_info['mlmta_playathon_slot']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/scheduling/mlmta-playathon-slot-types/manage/%mlmta_playathon_slot_type',
        'real path' => 'admin/structure/scheduling/mlmta-playathon-slot-types/manage/' . $type,
        'bundle argument' => 5,
      ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function mlmta_playathon_slot_menu() {
  $items = array();

  $items['mlmta-playathon-slot/add'] = array(
    'title' => 'Add Playathon Slot',
    'page callback' => 'mlmta_playathon_slot_admin_add_page',
    'access arguments' => array('administer playathon slot entities'),
    'file' => 'mlmta_playathon_slot.admin.inc',
    'type' => MENU_LOCAL_ACTION,
    'tab_parent' => 'mlmta-playathon-slot',
    'tab_root' => 'mlmta-playathon-slot',
  );

  $mlmta_playathon_slot_uri = 'mlmta-playathon-slot/%mlmta_playathon_slot';
  $mlmta_playathon_slot_uri_argument_position = 1;

  $items[$mlmta_playathon_slot_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('mlmta_playathon_slot', $mlmta_playathon_slot_uri_argument_position),
    'page callback' => 'mlmta_playathon_slot_view',
    'page arguments' => array($mlmta_playathon_slot_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'mlmta_playathon_slot', $mlmta_playathon_slot_uri_argument_position),
    'file' => 'mlmta_playathon_slot.pages.inc',
  );

  $items[$mlmta_playathon_slot_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$mlmta_playathon_slot_uri . '/delete'] = array(
    'title' => 'Delete PlayathonSlot',
    'title callback' => 'mlmta_playathon_slot_label',
    'title arguments' => array($mlmta_playathon_slot_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mlmta_playathon_slot_delete_form', $mlmta_playathon_slot_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'mlmta_playathon_slot', $mlmta_playathon_slot_uri_argument_position),
    'file' => 'mlmta_playathon_slot.admin.inc',
  );

  $items[$mlmta_playathon_slot_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mlmta_playathon_slot_form', $mlmta_playathon_slot_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'mlmta_playathon_slot', $mlmta_playathon_slot_uri_argument_position),
    'file' => 'mlmta_playathon_slot.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  foreach (mlmta_playathon_slot_types() as $type => $info) {
    $items['mlmta-playathon-slot/add/' . $type] = array(
      'title' => 'Add PlayathonSlot',
      'page callback' => 'mlmta_playathon_slot_add',
      'page arguments' => array(2),
      'access callback' => 'entity_access',
      'access arguments' => array('create', 'mlmta_playathon_slot', $type),
      'file' => 'mlmta_playathon_slot.admin.inc',
    );
  }

  $items['admin/structure/scheduling/mlmta-playathon-slot-types/%mlmta_playathon_slot_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mlmta_playathon_slot_type_form_delete_confirm', 5),
    'access arguments' => array('administer PlayathonSlot types'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'mlmta_playathon_slot.admin.inc',
  );


  return $items;
}

/**
 * Implements hook_permission().
 */
function mlmta_playathon_slot_permission() {
  $permissions = array(
    'administer mlmta_playathon_slot types' => array(
      'title' => t('Administer PlayathonSlot types'),
      'description' => t('Allows users to configure PlayathonSlot types and their fields.'),
      'restrict access' => TRUE,
    ),
    'create mlmta_playathon_slot entities' => array(
      'title' => t('Create PlayathonSlot'),
      'description' => t('Allows users to create PlayathonSlot.'),
      'restrict access' => TRUE,
    ),
    'view playathon entities' => array(
      'title' => t('View PlayathonSlot'),
      'description' => t('Allows users to view PlayathonSlot.'),
      'restrict access' => TRUE,
    ),
    'edit any playathon entities' => array(
      'title' => t('Edit any PlayathonSlot'),
      'description' => t('Allows users to edit any PlayathonSlot.'),
      'restrict access' => TRUE,
    ),
    
    'edit own playathon entities' => array(
      'title' => t('Edit own PlayathonSlot'),
      'description' => t('Allows users to edit own PlayathonSlot.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}


/**
 * Implements hook_entity_property_info_alter().
 */
function mlmta_playathon_slot_entity_property_info_alter(&$info) {
  $properties = &$info['mlmta_playathon_slot']['properties'];
  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the PlayathonSlot was posted."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer playathon entities',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t("The date the PlayathonSlot was most recently updated."),
  );
  $properties['uid'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the PlayathonSlot."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer mlmta_playathon_slot entities',
    'required' => TRUE,
    'schema field' => 'uid',
  );
  
  $properties['mlmta_playathon_slot_id'] = array(
    'label' => t('PlayathonSlot ID'),
    'type' => 'integer',
    'description' => t('The ID of the PlayathonSlot'),
    'schema field' => 'mlmta_playathon_slot_id',
  );
  
}


/*******************************************************************************
 ********************************* PlayathonSlot API's **********************************
 ******************************************************************************/

/**
 * Access callback for mlmta_playathon_slot.
 */
function mlmta_playathon_slot_access($op, $mlmta_playathon_slot, $account = NULL, $entity_type = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
    case 'create':
      return user_access('administer mlmta_playathon_slot entities', $account)
          || user_access('create mlmta_playathon_slot entities', $account);
    case 'view':
      return user_access('administer mlmta_playathon_slot entities', $account)
          || user_access('view mlmta_playathon_slot entities', $account);
    case 'edit':
      $current_user_wrapper = entity_metadata_wrapper('user', $account->uid);
      $mlmta_playathon_slot_wrapper = entity_metadata_wrapper('mlmta_playathon_slot', $mlmta_playathon_slot);
      return user_access('administer mlmta_playathon_slot entities')
          || user_access('edit any mlmta_playathon_slot entities')
          || (user_access('edit own mlmta_playathon_slot entities') && ($mlmta_playathon_slot->uid == $account->uid));
  }
}

/**
 * Load a mlmta_playathon_slot.
 */
function mlmta_playathon_slot_load($mlmta_playathon_slot_id, $reset = FALSE) {
  $mlmta_playathon_slots = mlmta_playathon_slot_load_multiple(array($mlmta_playathon_slot_id), array(), $reset);
  return reset($mlmta_playathon_slots);
}

/**
 * Load multiple mlmta_playathon_slot based on certain conditions.
 */
function mlmta_playathon_slot_load_multiple($mlmta_playathon_slot_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('mlmta_playathon_slot', $mlmta_playathon_slot_ids, $conditions, $reset);
}

/**
 * Save mlmta_playathon_slot.
 */
function mlmta_playathon_slot_save($mlmta_playathon_slot) {
  return entity_save('mlmta_playathon_slot', $mlmta_playathon_slot);
}

/**
 * Delete single mlmta_playathon_slot.
 */
function mlmta_playathon_slot_delete($mlmta_playathon_slot) {
  entity_delete('mlmta_playathon_slot', entity_id('mlmta_playathon_slot' ,$mlmta_playathon_slot));
}

/**
 * Delete multiple mlmta_playathon_slots.
 */
function mlmta_playathon_slot_delete_multiple($mlmta_playathon_slot_ids) {
  entity_delete_multiple('mlmta_playathon_slot', $mlmta_playathon_slot_ids);
}


/*******************************************************************************
 ****************************** PlayathonSlot Type API's ********************************
 ******************************************************************************/

/**
 * Access callback for mlmta_playathon_slot Type.
 */
function mlmta_playathon_slot_type_access($op, $entity = NULL) {
  return user_access('administer mlmta_playathon_slot types');
}

/**
 * Load mlmta_playathon_slot Type.
 */
function mlmta_playathon_slot_type_load($mlmta_playathon_slot_type) {
  return mlmta_playathon_slot_types($mlmta_playathon_slot_type);
}

/**
 * List of mlmta_playathon_slot Types.
 */
function mlmta_playathon_slot_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('mlmta_playathon_slot_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Save mlmta_playathon_slot type entity.
 */
function mlmta_playathon_slot_type_save($mlmta_playathon_slot_type) {
  return entity_save('mlmta_playathon_slot_type', $mlmta_playathon_slot_type);
}

/**
 * Delete single case type.
 */
function mlmta_playathon_slot_type_delete($mlmta_playathon_slot_type) {
  entity_delete('mlmta_playathon_slot_type', entity_id('mlmta_playathon_slot_type' ,$mlmta_playathon_slot_type));
}

/**
 * Delete multiple case types.
 */
function mlmta_playathon_slot_type_delete_multiple($mlmta_playathon_slot_type_ids) {
  entity_delete_multiple('mlmta_playathon_slot_type', $mlmta_playathon_slot_type_ids);
}


/**
 * Implements hook_field_extra_fields().
 *
 * This exposes the "extra fields" (usually properties that can be configured
 * as if they were fields) of the entity as pseudo-fields
 * so that they get handled by the Entity and Field core functionality.
 * Node titles get treated in a similar manner.
 */
function mlmta_playathon_slot_field_extra_fields() {
  $extra_fields = array();
  
  $form_elements['name'] = array(
    'label' => t('Name'),
    'description' => t('The full name of this mlmta_playathon_slot'),
    'weight' => -5,
  );

  $display_elements['mlmta_playathon_slot_id'] = array(
    'label' => t('PlayathonSlot ID'),
    'description' => t('The ID of the mlmta_playathon_slot'),
    'weight' => -6,
  );
  
  $display_elements['created'] = array(
    'label' => t('Creation'),
    'description' => t('Creation date (an extra display field)'),
    'weight' => 0,
  );
  
  $display_elements['name'] = array(
    'label' => t('Name'),
    'description' => t('The full name of this mlmta_playathon_slot'),
    'weight' => -5,
  );

  foreach (mlmta_playathon_slot_types() as $type => $info) {
    $extra_fields['mlmta_playathon_slot'][$type]['form'] = $form_elements;
    $extra_fields['mlmta_playathon_slot'][$type]['display'] = $display_elements;
  }
  return $extra_fields;
}

/**
 * Implements hook_admin_paths().
 */
function mlmta_playathon_slot_admin_paths() {
  return array(
    'mlmta-playathon-slot/*' => TRUE,
  );
}



//////////////////////////////// DEFAULT FIELDS //////////////////////

/**
 * Add default fields to a PlayathonSlot entity bundle
 *
 * - mlmta_playathon_slot_first_name
 * - mlmta_playathon_slot_last_name
 * - mlmta_playathon_slot_age
 * - mlmta_playathon_slot_email
 *
 * 
 * @param $mlmta_playathon_slot_type
 *   A mlmta_playathon_slot type object.
 */

function mlmta_playathon_slot_add_default_fields($mlmta_playathon_slot_type) {
    // Add playathon_pursuit_reference
    $field = field_info_field('playathon_pursuit_reference');
    $field_instance = field_info_instance('mlmta_playathon_slot', 'playathon_pursuit_reference', $mlmta_playathon_slot_type->type);
    
  if (empty($field)) {
    $field = array(
      'field_name' => 'playathon_pursuit_reference',
      'type' => 'entityreference',
      'settings' => array(
        'target_type' => 'pursuit',
        'handler_settings' => array('target_bundles' => NULL),
      ),
      'cardinality' => 1,
      'translatable' => FALSE,
    );
    field_create_field($field); 
  }
  
  if(empty($field_instance)){
    $instance = array(
      'field_name' => 'playathon_pursuit_reference',
      'entity_type' => 'mlmta_playathon_slot',
      'bundle' => $mlmta_playathon_slot_type->type,
      'label' => 'Pursuit reference',
      'required' => false,
      'widget' => array(
        'type' => 'options_select'
      ),
      'settings' => array(
        'target_type' => 'pursuit',
        'handler_settings' => array('target_bundles' => NULL),
      ),
      'display' => array(
        'default' => array('label' => 'inline', 'type' => 'entityreference_label'),
      ),
    );
    field_create_instance($instance);      
  }
  
  
  
  // Add mlmta_playathon_slot_time
  $field = field_info_field('mlmta_playathon_slot_time');
  $field_instance = field_info_instance('mlmta_playathon_slot', 'mlmta_playathon_slot_time', $mlmta_playathon_slot_type->type);
  
  if (empty($field)) {
    $field = array(
      'field_name' => 'mlmta_playathon_slot_time',
      'type' => 'datetime',
      'module' => 'date',
      'settings' => array(
        'granularity' => array (
          'month' => 'month',
          'day' => 'day',
          'hour' => 'hour',
          'minute' => 'minute',
          'year' => 'year',
          'second' => 0,
        ),
        'tz_handling' => 'site',
      ),
      'cardinality' => 1,
      'translatable' => FALSE,
    );
    field_create_field($field); 
  }

  if(empty($field_instance)){
    $instance = array(
      'field_name' => 'mlmta_playathon_slot_time',
      'entity_type' => 'mlmta_playathon_slot',
      'bundle' => $mlmta_playathon_slot_type->type,
      'label' => 'Playathon Slot',
      'description' => 'Enter the mlmta_playathon_slot\'s time. If left blank, the system will be unable to calculate the age for this mlmta_playathon_slot',
      'required' => false,
      'widget' => array(
        'weight' => 2,
        'type' => 'date_popup',
        'module' => 'date',
        'active' => 1,
        'settings' => array (
          'input_format' => 'm/d/Y h:ia',
          'year_range' => '-1:1',
          'increment' => 1,
          'label_position' => 'above',
          'no_fieldset' => 0,
        ),
      ),
      'settings' => array(
        'default_value' => 'blank',
        'default_value_code' => '',
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'date_default',
          'settings' => array('format_type' => 'short'),
          'module' => 'date',
        ),
      ),
    );
    field_create_instance($instance);      
  }
}
