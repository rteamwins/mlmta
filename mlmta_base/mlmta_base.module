<?php

/**
 * @file Contains common functions for the 3 MLMTA festivals
 */


// Include the main TCPDF library (search for installation path).
require_once('sites/all/libraries/tcpdf/tcpdf.php');
// Extend the TCPDF class to create custom Header and Footer for things related to time blocks
class MYPDF extends TCPDF {
  public $room = 'Undefined';
  public $timeblock = 'Undefined';
  public $event = 'Undefined';
  
  public function Header() {
    // Set font
    $this->SetFont('helvetica', 'B', 15);
    $this->SetY(10);
    // Title
    $this->Cell(0, 15, $this->event, 0, false, 'C', 0, '', 0, false, 'M', 'M');
  }
  // Page footer
  public function Footer() {
    // Position at 15 mm from bottom
    $this->SetY(-15);
    // Set font
    $this->SetFont('helvetica', '', 9);
    // Page number
    $this->Cell(0, 10, 'Room: ' . $this->room .'. Time block: '.$this->timeblock.'. Page '.$this->getAliasNumPage().'/'.$this->getAliasNbPages(), 0, false, 'C', 0, '', 0, false, 'T', 'M');
  }
}

// Extension for a neutral, customized footer and header
class NORMALPDF extends TCPDF {
  public function Header() {
    // Set font
    $this->SetFont('helvetica', '', 14);
    $this->SetY(10);
    // Title
    $this->Cell(0, 15, "Main Line Music Teachers Association", 0, false, 'C', 0, '', 0, false, 'M', 'M');
    $this->SetFont('helvetica', '', 9);
    $this->SetY(15);
    $this->Cell(0,15, "Affiliated with Pennsylvania Music Teachers Association and Music Teachers National Association", 0, false, 'C', 0, '', 0, false, 'M', 'M');
  }
  // Page footer
  public function Footer() {
    // Position at 15 mm from bottom
    $this->SetY(-15);
    // Set font
    $this->SetFont('helvetica', '', 9);
    // Page number
    $this->Cell(0, 10, 'Page: '. $this->getAliasNumPage().'/'.$this->getAliasNbPages(), 0, false, 'C', 0, '', 0, false, 'T', 'M');
  }
}

/**
 * Implements hook_menu().
 *
 * Defines menu callbacks common to all systems
 */
function mlmta_base_menu() {
  $items['mlmta-form/%pursuit/view'] = array(
    'title' => 'Registration',
    'page callback' => 'mlmta_base_view_page',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  
  $items['mlmta-form/%pursuit/edit'] = array(
    'title' => 'Registration',
    'page callback' => 'mlmta_base_edit_page',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );

  $items['admin/mlmta-form/%ctools_js/%pursuit/view'] = array(
    'title' => 'MLMTA registration',
    'page callback' => 'mlmta_base_modal_show',
    'page arguments' => array(2, 3),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Router function for editing pursuits (registrations)
 * This is used since the view functions are slightly different, especially for the theory festival (which uses a view individual-registration
 * @param Pursuit $pursuit
 *    A pursuit object
 */
function mlmta_base_edit_page($pursuit) {

  switch ($pursuit->type) {
    // These machine names are inherited from dsmta. In fact, solo = piano_solo and ensemble = vocal_ensemble_performance
    case 'vocal_ensemble_performance':
      $form_id = 'mlmta_ensemble_form';
      module_load_include('inc','mlmta_solo_forms','mlmta_ensemble');
      break;
    case 'piano_solo':
      $form_id = 'mlmta_piano_solo_form';
      module_load_include('inc', 'mlmta_solo_forms', 'mlmta_solo');
      break;
    case 'recital_solo':
      $form_id = 'mlmta_recital_solo_form';
      module_load_include('inc', 'mlmta_recital_forms', 'mlmta_recital_solo');
      break;
    case 'recital_ensemble':
      $form_id = 'mlmta_recital_ensemble_form';
      module_load_include('inc', 'mlmta_recital_forms', 'mlmta_recital_ensemble');
      break;
    case 'cmf_solo':
      $form_id = 'mlmta_cmf_solo_form';
      module_load_include('inc', 'mlmta_cmf_forms', 'mlmta_cmf_solo');
      break;
    case 'cmf_ensemble':
      $form_id = 'mlmta_cmf_ensemble_form';
      module_load_include('inc', 'mlmta_cmf_forms', 'mlmta_cmf_ensemble');
      break;
    case 'playathon':
      $form_id = 'mlmta_supersat_playathon_form';
      module_load_include('inc', 'mlmta_supersat_forms', 'mlmta_supersat_playathon');
      break;
    case 'kits':
      $form_id = 'mlmta_supersat_kits_form';
      module_load_include('inc', 'mlmta_supersat_forms', 'mlmta_supersat_kits');
      break;
    case 'mc':
      $form_id = 'mlmta_supersat_mc_form';
      module_load_include('inc', 'mlmta_supersat_forms', 'mlmta_supersat_mc');
      break;
    default:
      return 'Undefined';
  }
  if (!mlmta_base_edit_access_check($pursuit)) {
    return MENU_ACCESS_DENIED;
  }
  return drupal_get_form($form_id, $pursuit);
}

/**
 * Router function for viewing pursuits (registrations)
 * This is used since the edit functions are slightly different
 * @param Pursuit $pursuit
 *    A pursuit object
 */
function mlmta_base_view_page($pursuit) {
  switch ($pursuit->type) {
    case 'piano_solo':
    case 'vocal_ensemble_performance':
      return mlmta_solo_forms_page($pursuit); // These two use exactly the same view function
      break;
    case 'recital_solo':
    case 'recital_ensemble':
      return mlmta_recital_forms_page($pursuit);
      break;
    case 'cmf_solo':
    case 'cmf_ensemble':
      return mlmta_cmf_forms_page($pursuit);
    case 'playathon':
    case 'kits':
    case 'mc':
      return mlmta_supersat_forms_page($pursuit);
    default :
        return 'Undefined';
  }

}

// These helper funtions are used by all forms in the MLMTA systems

/**
 * Show the content in a modal
 *
 * @param $ajax
 *    Flag for JavaScript enabled browser
 * @param $pursuit
 *    The pursuit to view
 */

function mlmta_base_modal_show($ajax, $pursuit){
    if ($pursuit->type == 'break') {
      if ($ajax) {
        ctools_include('modal');
        return ctools_modal_render('Nope','You cannot view or edit a break or placeholder.');
      } else{
       return 'You cannot view or edit a break or placeholder. Click the left arrow to go back to the previous page.';
      }
    }
    $page = mlmta_base_page($pursuit);
    if ($ajax) {
      //watchdog('checking ajax', 'is here');
      //ctools_include('ajax');
      ctools_include('modal');
      if (empty($page)) {
        return 'Error';
      }
      return ctools_modal_render('',$page);
    } else {
    // watchdog('checking ajax', 'is NOT here');
      return $page; 
    }
}

/**
 * Generates a view of the pursuit for all types
 */
/**
 * Creates a render array of the pursuit with all relations
 */
function mlmta_base_page($pursuit) {
  list(, , $bundle) = entity_extract_ids('pursuit', $pursuit);
  $bundle_label = scheduling_bundle_label('pursuit', $bundle);
  drupal_set_title($bundle_label);
  return mlmta_base_multiple_page(array($pursuit));
}

/**
 * Builds and returns a renderable array for multiple pursuit. Built completely with students, teachers, accompanists, families and pieces
 */
function mlmta_base_multiple_page($pursuits) {
  $page = entity_view('pursuit', $pursuits, 'complete');
  return $page;
}

/**
 * Helper to build list of students in system
 * @return array An associative of student names array keyed by student id
 */
function _mlmta_student_build_list($student_type) {
  $student_array = array();
  global $user;
  $current_user = user_load($user->uid);
  $current_teacher_id = !empty($current_user->field_user_teacher_reference['und'][0]['target_id'])? $current_user->field_user_teacher_reference['und'][0]['target_id'] : 0;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'student')
        ->entityCondition('bundle', $student_type)
        ->fieldOrderBy('student_last_name','value');
  if (!user_access('edit any pursuit entities') && $current_teacher_id != 0) {   
    $query->fieldCondition('student_teacher_references', 'target_id', $current_teacher_id);
  }
  $result = $query->execute();
  if ($result) {
    $student_ids = array_keys($result['student']);
    $students = student_load_multiple($student_ids);
    foreach ($students as $student) {
      $student_array[$student->student_id] = $student->name;
    }
  }
  return $student_array;
}

/**
 * Helper to build list of teachers in system
 * @return array An associative of teacher names array keyed by student id
 */
function _mlmta_teacher_build_list($teacher_type) {
  global $user;
  $teacher_array = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'teacher')
        ->entityCondition('bundle', $teacher_type)
        ->fieldOrderBy('teacher_last_name','value');
  //if (!(user_has_role(4) || user_has_role(3))) {   // role ID 4 is the manager's rid, rid 3 is admin
  //  $query->propertyCondition('uid', $user->uid);
  //}
  $result = $query->execute();
  if ($result) {
    $teacher_ids = array_keys($result['teacher']);
    $teachers = teacher_load_multiple($teacher_ids);
    foreach ($teachers as $teacher) {
      $teacher_array[$teacher->teacher_id] = $teacher->name . ' (code '.$teacher->teacher_code['und'][0]['value'] .')';
    }
  }
  return $teacher_array;
}


/**
 * Helper to build list of families to replace in the field displayed in the form. Shows all families for managers and admin
 * @return An associative array to replace the one in $form_temp['field_student_family']['und']['#options']
 */
function _mlmta_family_build_list() {
  global $user;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'family')
        ->propertyOrderBy('title');
  if (!user_access('edit any family entities')) {  
    $query->propertyCondition('uid', $user->uid);
  }
  $result = $query->execute();
  $family_array = array ('_none' => '- None -');
  if ($result) {
    $family_ids = array_keys($result['family']);
    $families = family_load_multiple($family_ids);
    foreach ($families as $family) {
      $family_array[$family->family_id] = $family->title;
    }
  }
  return $family_array;
}

/**
 * Ajax callback function to prepopulate student 1 information
 */
function _mlmta_student_1_prepopulate($form, $form_state) {
  return $form['student_1']['student_fieldset'];
}

/**
 * Ajax callback function to prepopulate student 2 information
 */
function _mlmta_student_2_prepopulate($form, $form_state) {
  return $form['student_2']['student_fieldset'];
}

/**
 * Ajax callback function to prepopulate student 2 information
 */
function _mlmta_accompanist_prepopulate($form, $form_state) {
  return $form['accompanist']['student_fieldset'];
}
/**
 * Ajax callback function to prepopulate student 3 information
 */
function _mlmta_student_3_prepopulate($form, $form_state) {
  return $form['student_3']['student_fieldset'];
}

/**
 * Ajax callback function to prepopulate generic student information (currently used only by the vocal ensemble)
 */
function _mlmta_student_generic_prepopulate($form, $form_state) {
  $current_step = $form_state['step'];
  $delta =  $form_state['step_information'][$current_step]['delta'];
  return $form['student'][$delta]['student_fieldset'];
}

/**
 * Ajax callback function to prepopulate teacher 1 information
 */
function _mlmta_teacher_1_prepopulate($form, $form_state) {
  return $form['student_1']['teacher_fieldset'];
}

/**
 * Ajax callback function to prepopulate teacher 2 information
 */
function _mlmta_teacher_2_prepopulate($form, $form_state) {
  return $form['student_2']['teacher_fieldset'];
}

/**
 * Ajax callback function to prepopulate teacher 2 information
 */
function _mlmta_accompanist_teacher_prepopulate($form, $form_state) {
  return $form['accompanist']['teacher_fieldset'];
}

/**
 * Ajax callback function to prepopulate teacher 2 information
 */
function _mlmta_teacher_3_prepopulate($form, $form_state) {
  return $form['student_3']['teacher_fieldset'];
}

/**
 * Ajax callback function to prepopulate generic student information (currently used only by the vocal ensemble)
 */
function _mlmta_teacher_generic_prepopulate($form, $form_state) {
  $current_step = $form_state['step'];
  $delta =  $form_state['step_information'][$current_step]['delta'];
  return $form['student'][$delta]['teacher_fieldset'];
}

/**
 * Implements hook_entity_info_alter().
 * Creates new view for student and teacher
 */
function mlmta_base_entity_info_alter(&$entity_info) {

  $entity_info['student']['view modes']['for_pursuit'] = array(
    'label' => t('For pursuit'),
    'custom settings' => TRUE,
  );
  
  $entity_info['teacher']['view modes']['for_pursuit'] = array(
    'label' => t('For pursuit'),
    'custom settings' => TRUE,
  );
  
  $entity_info['teacher']['view modes']['for_download'] = array(
    'label' => t('For download'),
    'custom settings' => TRUE,
  );
  
  $entity_info['piece']['view modes']['for_download'] = array(
    'label' => t('For download'),
    'custom settings' => TRUE,
  );
  
  $entity_info['piece']['view modes']['for_pursuit'] = array(
    'label' => t('For pursuit'),
    'custom settings' => TRUE,
  );
  
  
  $entity_info['pursuit']['view modes']['complete'] = array(
    'label' => t('Complete'),
    'custom settings' => TRUE,
  );
  
  
  //$entity_info['pursuit']['view modes']['theory_complete'] = array(
  //  'label' => t('Theory complete'),
  //  'custom settings' => TRUE,
  //);
}

/**
 * Implements template_preprocess_entity()
 * Provides new variables to pursuit template to show 
 */
function mlmta_base_preprocess_entity(&$variables) {
  if ($variables['entity_type'] == 'pursuit') {
    $wrapper = entity_metadata_wrapper('pursuit', $variables['pursuit']);
    $variables['content']['bundle'] = array('#markup' => scheduling_bundle_label('pursuit', $variables['pursuit']->type));
    $variables['pursuit_id'] = $variables['pursuit']->pursuit_id;
    $base_url = 'mlmta-form/'.$wrapper->getIdentifier();
    $destination = str_replace('ajax/', 'nojs/', current_path());
    $variables['content']['edit_link']['#markup'] = l(
                                            'Edit',
                                            $base_url.'/edit',
                                            array(
                                              'query' => array(
                                                'destination' => $base_url . '/view',
                                              ),
                                            )
    );
    if ($wrapper->pursuit_order_reference->status->value() != 'cart' && !mlmta_base_edit_access_check($wrapper->value())) {
      $variables['content']['edit_link']['#markup'] = 'Paid registrations cannot be edited. If you need changes please contact the festival chair.';
    } 
    $variables['in_cart'] = $wrapper->pursuit_order_reference->status->value() == 'cart' ? 1 : 0;
    $variables['content']['created']['#markup'] = date('D m/d/y - g:i a', $variables['pursuit']->created);
  }
}


/**
 * Implements hook_permission().
 */
function mlmta_base_permission() {
  $permissions = array(
    'edit paid pursuits' => array(
      'title' => t('Edit paid pursuits'),
      'description' => t('Edit pursuit that have already been paid for'),
    ),
    'edit pursuit after deadline' => array(
      'title' => t('Edit pursuit after the deadline'),
      'description' => t('Allows users to edit pursuits after the deadline.'),
    ),
  );
  
  return $permissions;
}

/**
 * Checks that user is able to edit paid pursuit
 */
function mlmta_base_edit_access_check($pursuit) {
  if (!user_is_logged_in()) {
    return FALSE;
  }
  $pursuit_wrapper = entity_metadata_wrapper('pursuit', $pursuit);
  if ($pursuit_wrapper->pursuit_order_paid->value() != 1) {
    return TRUE;
  }
  return user_access('edit paid pursuits');
}

/**
 * Implements template_preprocess_views_aggregator_results_table().
 * 
 * Adds special css class to pursuits with time conflicts
 */
function mlmta_base_preprocess_views_aggregator_results_table(&$vars) {
  if(in_array($vars['view']->name, array('pursuits_1', 'pursuits_1_supersat', 'pursuits_1_cmf', 'pursuits_1_recitals'))) { // @todo Add new pursuit view names for each of the systems
    $rows = &$vars['rows'];
    foreach ($rows as $delta => $row) {
      // Add special class for conflicted pursuit
      if (isset($vars['view']->style_plugin->rendered_fields[$delta]['pursuit_time_conflict']) && $vars['view']->style_plugin->rendered_fields[$delta]['pursuit_time_conflict']) {
        $vars['row_classes'][$delta][] = 'conflicted-pursuit';
      }
    }    
  }
}

/**
 * Implements hook_views_pre_render().
 * Adds modal libraries
 * 
 */
function mlmta_base_views_pre_render(&$views) {
  // Make sure it's the correct view
  if (in_array($views->name, array('pursuits_1', 'pursuits_1_recitals', 'pursuit_1_supersat','pursuits_1_cmf'))) {  // @todo  add check or other views for ensemble and theory
    // add needed javascript
    // drupal_add_library('system', 'drupal.ajax');
    //watchdog('view_prerender', 'Im here');
    //ctools_include('ajax');
    ctools_include('modal');
    ctools_include('ajax');
    ctools_modal_add_js();
    drupal_add_js(array(
      'my-modal-style' => array(
        'modalSize' => array(
          'width' => '.5',
        ),
        'closeText' => '',
        'animation' => 'fadeIn',
        'closeImage' => theme('image', array('path' => ctools_image_path('close-image-small.png', 'mlmta_base'), 'alt' => t('Close window'), 'title' => t('Close window'))),
      ),
    ), 'setting');
  }
}

/**
 * Implements hook_form_alter().
 * Hides the "Already paid" field in the checkout process
 */
function mlmta_base_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'commerce_checkout_form_checkout':
      $form['customer_profile_billing']['field_non_member_paid']['#states'] = array(
        'invisible' => array(
          ':input[name="customer_profile_billing[field_mlmta_member][und]"]' => array ('value' => 1),
        ),
      );
      break;
    case 'student_form':
      // hide fields for normal users
      if (!(user_has_role(3) || user_has_role(4))) {
        unset($form['student_pursuit_reference']);
        $form['field_student_family']['und']['#options'] = _mlmta_family_build_list();
      }
      if (!empty($form['#entity']->student_pursuit_reference['und'])) {
        // disable delete button
        $form['actions']['delete']['#disabled'] = TRUE;
        $form['cant-delete'] = array(
          '#markup' => t('This student is currently registered for activities in this system or is in your shopping cart, and therefore can\'t be deleted. If you wish to delete it, please delete the registration of contact the administrator'),
          '#prefix' => '<p style="color: red;">',
          '#suffix' => '</p>',
          '#weight' => 90,
        );
      }
      break;
  }
}

/**
 * Implements hook_pursuit_delete().
 * 
 * Fetches the line item that references a pursuit being deleted and removes the reference. 
 * This hook replaces a Rule since this line items can reference an unlimited number of pursuits (difficult to do with Rules)
 *
 * 
 */
function mlmta_base_pursuit_delete($pursuit) {
  $q = new EntityFieldQuery();
  $q->entityCondition('entity_type', 'commerce_line_item')
    ->fieldCondition('field_pursuit_reference', 'target_id', $pursuit->pursuit_id);
  $result = $q->execute();
  if (!empty($result['commerce_line_item'])) {
    $li_ids = array_keys($result['commerce_line_item']);
    $lis = commerce_line_item_load_multiple($li_ids);
    foreach ($lis as $li) {
      $target_ids = array();
      $ref_field_items = !empty($li->field_pursuit_reference['und'][0]) ? $li->field_pursuit_reference['und'] : array();
      foreach ($ref_field_items as $item) {
        if ($item['target_id'] != $pursuit->pursuit_id) {
          $target_ids[] = $item['target_id'];
        }
      }
      $li_w = entity_metadata_wrapper('commerce_line_item', $li);
      $li_w->field_pursuit_reference = $target_ids; // This will probably throw an error for fields that only reference 1 item.
      $li_w->save();
    }
  }
}

/**
 * Implements hook_views_api().
 * // THIS   ended up not being needed, as I defined the calculated age through a computed entity property
 */
//function mlmta_base_views_api() {
//  return array(
//    'api' => 3,
//    'path' => drupal_get_path('module', 'mlmta_base') . '/views',
//  );
//}


/**
 * Create an option list with instruments
 */
function mlmta_base_instrument_list() {
    $options = array (
      'piano' => t('Piano'),
      'voice' => t('Voice'),
      'Strings'=> array(
        'violin' => t('Violin'),
        'viola' => t('Viola'),
        'cello' => t('Cello'),
        'bass' => t('Bass'),
        'harp' => t('Harp'),
        'guitar' => t('Guitar'),
      ),
      'Woodwinds' => array(
        'flute' => t('Flute'),
        'clarinet' => t('Clarinet'),
        'oboe' => t('Oboe'),
        'ehorn' => t('English horn'),
        'recorder' => t('Recorder'),
        'horn' => t('French horn'),
        'saxophone' => t('Saxophone'),
      ),
      'Brass' => array(
        'trumpet' => t('Trumpet'),
        'trombone' => t('Trombone'),
        'tuba' => t('Tuba'),
        'euphonium' => t('Euphonium'),
      ),
      'percussion' => t('Percussion'),
      'vibraphone' => t('Vibraphone'),
      'marimba' => t('Marimba'),
    );
    return $options;
}

/**
 * Implements hook_views_aggregation_functions_info().
 */
function mlmta_base_views_aggregation_functions_info() {
  $functions = array(
    'views_aggregator_enumerate_ages' => array(
      'group' => t('Subg enum (custom)'),
      'column' => NULL,
    ),
  );
  return $functions;
}

/**
 * Experimental. 
 *
 * This is a subgroup aggregator - enumerator, and it can work with any field. The parameter is the views field name on which to sub-aggregate
 * 
 * @param array $groups
 *   an array of groups of rows, each group indexed by group value
 * @param object $field_handler
 *   the handler for the view column to find the maximum groups member in
 * @param string $field_in_row
 *   the name of the field on which to sub-aggregate as it appears in the $row object to use as subgrouping. This is the best I can do :( 
 * @return array
 *   an array of values, containung only the 'column' group
 */
function views_aggregator_enumerate_ages($groups, $field_handler, $field_in_row) {
  $values = array();
  foreach ($groups as $group => $rows) {
    $running_student_id = 0;
    $ages = array();
    foreach ($rows as $num => $row) {
      if (!isset($row->{$field_in_row})) break; 
      $ages[$row->{$field_in_row}] = views_aggregator_get_cell($field_handler, $num, TRUE);
    }
    if( count($ages) >0 ) {
      $values[$group] =  implode(', ', $ages);    
    } else {
      $values[$group] = 'No data';
    }
  }
  return $values;
}

/**
 * Implements hook_pursuit_update_name_alter().
 * Replaces hooks in individual mmlmta modules
 *
 */
function mlmta_base_pursuit_update_name_alter(&$name, $pursuit) {
  $wrapper = entity_metadata_wrapper('pursuit', $pursuit);
  if (isset($wrapper->field_accompanist) && !empty($wrapper->field_accompanist->value())) {
    $accompanist_wrapper = $wrapper->field_accompanist; 
    $name[] = $accompanist_wrapper->student_first_name->value() . ' ' . $accompanist_wrapper->student_last_name->value() . ' (acc.)';
  } 
}

/**
 * Implements hook_preprocess_views_data_export_csv_body().
 * Creates a multi-column csv for multiple value referenced fields (in this case, piece) for existing views exports
 */

function mlmta_base_preprocess_views_data_export_csv_body(&$vars) {
  if (in_array($vars['view']->name, array('export_registrations','export_registrations_recital_', 'export_registrations_cmf_')) && $vars['view']->current_display == 'views_data_export_1') {
    $agg_field = 'pursuit_id';
    $fan_out_fields = array('title_1', 'piece_composer', 'name', 'field_instrument_list'); // These are the fields that need to be expanded into columns
    $fan_out_number = array('title_1' => 2, 'piece_composer' => 2, 'name' => 4, 'field_instrument_list' => 4); // Max number of new columns
    $delta_field = array('title_1' => 'delta_1', 'piece_composer' => 'delta_1', 'name' => 'delta', 'field_instrument_list' => 'delta_2'); // This array maps the field ID to the delta. The view MUST include the delta field for the multiple-value reference fields! 
     $aggregate = array();
    $view     = $vars['view'];
    $fields   = &$view->field;
    $hide_empty_support = !empty($vars['hide_empty_support']);
  
    $rows = $vars['rows'];
  
    $keys = array_keys($fields);
    
    // First created empty place holders for all fields  
    foreach ($rows as $num => $row) {
      $agg_key = $view->style_plugin->rendered_fields[$num][$agg_field];
      foreach ($keys as $id) {
        if (empty($fields[$id]->options['exclude'])) {
          $content = $view->style_plugin->rendered_fields[$num][$id];
  
          if ($hide_empty_support && !empty($fields[$id]->options['hide_empty'])) {
            if ($fields[$id]->is_value_empty($content, $fields[$id]->options['empty_zero'])) {
              continue;
            }
          }
          if (in_array($id, $fan_out_fields)) {
            $original_id = $id;
            for ($i = 0; $i < $fan_out_number[$original_id]; $i++) {
              $col_name = $col_name = $id . '_' .$i;
              $aggregate[$agg_key][$col_name] = '""';
            }
          } else {
            $aggregate[$agg_key][$id] = '""';
          }
        }
      }
    }
    
    // Then fill in! 
    foreach ($rows as $num => $row) {
      $agg_key = $view->style_plugin->rendered_fields[$num][$agg_field];
      foreach ($keys as $id) {
        if (empty($fields[$id]->options['exclude'])) {
          $content = $view->style_plugin->rendered_fields[$num][$id];
  
          if ($hide_empty_support && !empty($fields[$id]->options['hide_empty'])) {
            if ($fields[$id]->is_value_empty($content, $fields[$id]->options['empty_zero'])) {
              continue;
            }
          }
          
          $content = _mlmta_base_helper_preprocess_views_data_export_csv($vars, $content);
          
          if (in_array($id, $fan_out_fields)) {
            $original_id = $id;
            $found_column = FALSE;
            
            $delta_value = $view->style_plugin->rendered_fields[$num][$delta_field[$id]]; 
            $col_name = $id . '_' .$delta_value;
            $id = $col_name;
            
            if ($delta_value >= $fan_out_number[$original_id]) {
              continue; // Ignore if the delta for the field is larger than the one defined in fan_out_number (all columns are filled) 
            }
          }  
          $aggregate[$agg_key][$id] = $content;  
        }
      }
    }
    $vars['themed_rows'] = $aggregate;
    //dpm($aggregate);
  }

}

/**
 * Implements hook_preprocess_views_data_export_csv_header().
 * Processes the header for the CSV table, fanning out columns
 */
function mlmta_base_preprocess_views_data_export_csv_header(&$vars) {
if (in_array($vars['view']->name, array('export_registrations','export_registrations_recital_')) && $vars['view']->current_display == 'views_data_export_1') {
    $agg_field = 'pursuit_id';
    $fan_out_fields = array('title_1', 'piece_composer', 'name', 'field_instrument_list'); // These are the fields that need to be expanded into columns
    $fan_out_number = array('title_1' => 2, 'piece_composer' => 2, 'name' => 4, 'field_instrument_list' => 4);
    
    $view     = $vars['view'];
    $fields   = &$view->field;
    $fields_info = $view->display_handler->get_option('fields');
    $header  = array();
    foreach ($fields as $key => $field) {
      if (empty($field->options['exclude'])) {
        if (isset($fields_info) && isset($fields_info[$key]['label'])) {
          $title = check_plain($fields_info[$key]['label']);
        }
        else {
          $title = check_plain($field->label());
        }
        if (in_array($key, $fan_out_fields)) {
          for ($i = 0; $i < $fan_out_number[$key]; $i++) {
            $col_name = _mlmta_base_helper_preprocess_views_data_export_csv($vars, $title . ' ' .($i+1));
            $header[] = $col_name;
          }
        } else {
          $header[] = _mlmta_base_helper_preprocess_views_data_export_csv($vars, $title);
        }  
      }
    }
    $vars['header'] = $header;
  }
}


function _mlmta_base_helper_preprocess_views_data_export_csv (&$vars, $content) {
  // Special handling when quoted values are involved.
  if ($vars['options']['quote']) {
    $wrap = '"';
    $replace_value = '""';
  }
  else {
    $wrap = '';
    $replace_value = '';
  }
  $output = decode_entities($content);
  $output = (empty($vars['options']['keep_html'])) ? strip_tags($output) : $output;
  if (!empty($vars['options']['trim'])) {
    $output = trim($output);
  }

  if (!empty($vars['options']['encoding']) && function_exists('iconv')) {
    switch($vars['options']['encoding']) {
      case 'utf8_decode':
        $converted = utf8_decode($output);
        break;
      default:
        $converted = iconv("UTF-8", $vars['options']['encoding'], $output);
        break;
    }
    if ($converted !== FALSE) {
      $output = $converted;
    }
  }
  if (!empty($vars['options']['replace_newlines'])) {
    if (!empty($vars['options']['newline_token'])) {
      $output = str_replace( array("\r\n", "\r", "\n"), $vars['options']['newline_replacement'], $output);
    }
    else {
      $output = str_replace("\n", $vars['options']['newline_replacement'], $output);
    }
  }
  return $wrap . str_replace('"', $replace_value, $output) . $wrap;
}

/**
 * Implements hook_form_FORM_ID_alter
 * Adds validation for teacher code of a certain length
 */
function mlmta_base_form_user_register_form_alter(&$form, &$form_state) {
  $form['#validate'][] = 'mlmta_base_form_family_form_validate';
}

/**
 * Adds validation for mtna code
 */
function mlmta_base_form_family_form_validate($form, $form_state) {
  if(strlen($form_state['values']['field_teacher_code']['und'][0]['value'])<4 or strlen($form_state['values']['field_teacher_code']['und'][0]['value']) > 7) {
    form_set_error('field_teacher_code][und][0][value', t('Teacher code must be your MTNA ID and be between 4 and 7 digits long'));
  }
}

/**
 * Builds a flat array for multilevel pursuit for CSV export
 * Has not been tested for deep trees. Only 2 levels. It most likely won't work
 * @param <Entity Metadata Wrapper> $wrapper
 *     The wrapper to the entity
 * @param Array $structure
 *      The tree structure of column titles keyed by field name
 * @param Array $cardinality_index
 *      A flat array indicating cardinality bigger than 1, keyed by field name
 * @param Array $row
 *      The array of cells to be returned
 */
function mlmta_base_form_build_csv_row($wrapper, $structure, $cardinality_index,  &$row = array()) {
  foreach ($structure as $key => $content) {
    
    $columns = empty($cardinality_index[$key]) ? 1 : $cardinality_index[$key];
    $field_type = empty(field_info_field($key)) ? ' ' : field_info_field($key)['type']; 
    $cardinality_info = empty(field_info_field($key)) ? 1 : field_info_field($key)['cardinality']; // IF this is a property, field_info_field returns empty
    if (is_array($content)) {
      // We are dealing with an entity reference field, continue down the tree. Recursively pass content to this function
      if ($cardinality_info == 1) {
        if (isset($wrapper->$key) && !empty($wrapper->$key)) {
          mlmta_base_form_build_csv_row($wrapper->$key, $content, $cardinality_index, $row);
        } else {
          $row[] = '';
        }
      } else {
        for ($i = 0; $i < $columns; $i++) {
          if (isset($wrapper->$key[$i]) && !empty($wrapper->$key[$i])) {
            mlmta_base_form_build_csv_row($wrapper->$key[$i], $content, $cardinality_index, $row);                    
          } else { // this is reached is the item is empty, for example, for variable number of pieces
            foreach ($content as $item) {
              $row[] = '';
            }
          }
        }
      }
      continue;
    }
    if ($cardinality_info == 1) {
      if ($key == 'label') { // Get the label of the item. For some reason, title->value() provides a false positive for isset
        $value = $wrapper->label();
      } else {
        $value = isset($wrapper->$key) ? $wrapper->$key->value() : '';        
      }
      if ($field_type == 'hms_field') { // theme the hms fields
        $row[] = strip_tags(theme('hms', array('value' => $value, 'format' => 'm:ss')));        
      } elseif ($field_type == 'datetime') { // Theme date fields. Split them into date and time
        $row[] = format_date(strtotime($value['value'] . ' UTC'), 'custom', 'm/d/Y');
        $row[] = format_date(strtotime($value['value'].' UTC'), 'custom', 'h:ia');
        $row[] = format_date(strtotime($value['value2'].' UTC'), 'custom', 'h:ia');
      } else {
        $row[] = $value;
      }
    } else {
      for ($i = 0; $i < $columns; $i++) {
        $value =  $wrapper->$key[$i]->value();
        $row[] = $value;
      }
    }
  }
  return $row;
}

/**
 * Builds the header row for the CSV. Should be called just with one record
 * 
 * @param Array $structure
 *      The tree structure of column titles keyed by field name
 * @param Array $cardinality_index
 *      A flat array indicating cardinality bigger than 1, keyed by field name
 * @param Array $row
 *      The array of cells to be returned
 * @param String $delta
 *      It adds a delta number to fields within reference fields with multiple cardinality
 */
function mlmta_base_form_build_csv_header($structure, $cardinality_index,  &$row = array(), $delta = '') {
  foreach ($structure as $key => $content) {    
    $columns = empty($cardinality_index[$key]) ? 1 : $cardinality_index[$key];
    $field_type = empty(field_info_field($key)) ? ' ' : field_info_field($key)['type']; 
    $cardinality_info = empty(field_info_field($key)) ? 1 : field_info_field($key)['cardinality']; // IF this is a property, field_info_field returns empty
    if (is_array($content)) {
      // We are dealing with an entity reference field, continue down the tree. Recursively pass content to this function
      if ($cardinality_info == 1) {
        mlmta_base_form_build_csv_header($content, $cardinality_index, $row, $delta);        
      } else {
        for ($i = 0; $i < $columns; $i++) {
          mlmta_base_form_build_csv_header($content, $cardinality_index, $row, $delta.($i+1));            
        }
      }
      continue;
    }
    if ($cardinality_info == 1) {
      if ($field_type == 'datetime') { // Theme date fields. Split them into date and time
        $row[] = $content;
        $row[] = 'Time from';
        $row[] = 'Time to';
      } else {
        $row[] = $content . ' ' .$delta; 
      }
    } else {
      for ($i = 0; $i < $columns; $i++) {
        $row[] = $content . ' '. $delta .' '.($i+1);
      }
    }
  }
  return $row;
}

/**
 * Checks that form is activated (after activation date) and before the deadline
 * @param $event_id
 *  Event id. If null, then do not allow
 */
function mlmta_base_module_date_access_check($event_id) {
  if (!user_is_logged_in() || !$event_id) return FALSE;
  $event = event_load($event_id);
  if ($event->activation < time()) {
    
    return mlmta_base_module_deadline_check($event);
  
  } else {
    drupal_set_message(t('This form is not yet active. Activation date is: %activation', array('%activation' => format_date($event->activation, 'custom', 'm/d/Y h:ia'))), 'error');
    return FALSE;
  }
}

/**
 * Checks that the deadline for the form has not passed
 * @param Event $event
 *  Event id. If null, then do not allow
 */
function mlmta_base_module_deadline_check($event) {
  $deadline = $event->deadline;
  if (time()<=$deadline || user_access('edit pursuit after deadline')) {
    return TRUE;
  } else {
    drupal_set_message(t('The deadline for this event is past. Deadline date is: %deadline', array('%deadline' => format_date($event->deadline, 'custom', 'm/d/Y h:ia'))), 'error');
    return FALSE;
  }
}
