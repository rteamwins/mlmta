<?php

/**
 * Implements hook_menu().
 */

function mlmta_cmf_forms_menu(){
  $items = array();
  $items['cmf-solo-registration/new'] = array(
    'title' => t('Constance Murray solo registration form'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mlmta_cmf_solo_form'),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'mlmta_cmf_solo.inc',
  );
  
  $items['cmf-ensemble-registration/new'] = array(
    'title' => t('CMF ensemble registration form'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mlmta_cmf_ensemble_form'),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'mlmta_cmf_ensemble.inc',
  );
   
  $items['admin/cmf-form/%ctools_js/%pursuit/view'] = array(
    'title' => 'CMF solo registration',
    'page callback' => 'mlmta_cmf_forms_modal_show',
    'page arguments' => array(2, 3),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  
  $items['admin/config/cmf-registrations/manage/cmf-settings'] = array(
    'title' => 'Constance Murray general settings',
    'description' => 'General settings for the CMF forms.',
    'access arguments' => array('create timeblock entities'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mlmta_cmf_forms_configuration_form'),
    'type' => MENU_NORMAL_ITEM,
   );

    //$items['admin/download-program'] = array(
    //  'title' => 'Download recital program',
    //  'description' => 'Generates an html snipped with a table downloaded as a doc file.',
    //  'access arguments' => array('create timeblock entities'),
    //  'page callback' => 'mlmta_cmf_output_program',
    //  'type' => MENU_CALLBACK,
    //);
  return $items;
}


/**
 * Checks that user is able to edit paid pursuit
 */
function mlmta_cmf_forms_edit_access_check($pursuit) {
  if (!user_is_logged_in()) {
    return FALSE;
  }
  $pursuit_wrapper = entity_metadata_wrapper('pursuit', $pursuit);
  if ($pursuit_wrapper->pursuit_order_paid->value() != 1) {
    return TRUE;
  }
  return user_access('edit paid pursuits');
}


/**
 * Implements hook_pursuit_calculate_trimmed_duration_alter().
 */
function mlmta_cmf_forms_pursuit_calculate_trimmed_duration_alter(&$max_duration, $pursuit) {
  if (in_array($pursuit->type, array('cmf_solo'))) {  // @todo Create these pursuit types
    $max_duration = 20 * 60; 
  }
}

////////////  Display functions //////////////////


/**
 * Creates a render array of the pursuit with all relations
 */
function mlmta_cmf_forms_page($pursuit) {
  list(, , $bundle) = entity_extract_ids('pursuit', $pursuit);
  $bundle_label = scheduling_bundle_label('pursuit', $bundle);
  drupal_set_title($bundle_label);
  return mlmta_cmf_forms_multiple_page(array($pursuit));
}

/**
 * Builds and returns a renderable array for multiple pursuit. Built completely with students, teachers, accompanists, families and pieces
 */
function mlmta_cmf_forms_multiple_page($pursuits) {
  $page = entity_view('pursuit', $pursuits, 'complete'); // @todo Create this entity view mode
  return $page;
}


/**
 * Pursuit modal for admin callback
 */

/**
 * Show the content in a modal
 *
 * @param $ajax
 *    Flag for JavaScript enabled browser
 * @param $pursuit
 *    The pursuit to view
 */

function mlmta_cmf_forms_modal_show($ajax, $pursuit){
    if ($pursuit->type == 'break') {
      if ($ajax) {
        ctools_include('modal');
        return ctools_modal_render('Nope','You cannot view or edit a break or placeholder.');
      } else{
       return 'You cannot view or edit a break or placeholder. Click the left arrow to go back to the previous page.';
      }
    }
    $page = mlmta_cmf_forms_page($pursuit);
    if ($ajax) {
      //watchdog('checking ajax', 'is here');
      //ctools_include('ajax');
      ctools_include('modal');
      if (empty($page)) {
        return 'Error';
      }
      return ctools_modal_render('',$page);
    } else {
    // watchdog('checking ajax', 'is NOT here');
      return $page; 
    }
}


/**
 * Configuration form for mlmta solo
 */
function mlmta_cmf_forms_configuration_form($form, &$form_state) {
  // Provide a default date in the format YYYY-MM-DD HH:MM:SS.
  $event_date = format_date(variable_get('tenuto_cmf_event_date','1577854800'), 'custom', 'Y-m-d H:i:s');
  $deadline = format_date(variable_get('tenuto_cmf_form_deadline','1577854800'), 'custom', 'Y-m-d H:i:s');
  $cutoff = format_date(variable_get('tenuto_cmf_form_cutoff','1577854800'), 'custom', 'Y-m-d H:i:s');
  $format = "m-d-Y h:i A";
  
  $events = event_load_all();
  if (user_access('administer event types')) {
    if (!empty($events)) {
  
      $options = array();
      foreach ($events as $id => $event) {
        $options[$id] = $events[$id]->title; 
      }
      
      $form['tenuto_cmf_event'] = array(
        '#type' => 'select',
        '#title' => 'Event',
        '#description' => 'Choose an event from the list of defined events for this site, which will be linked to the CMF forms. This most likely will NOT need to be changed once it is set. Do NOT change this if you are not sure what it means',
        '#required' => TRUE,
        '#options' => $options,
        '#default_value' => variable_get('tenuto_cmf_event',NULL),
      );
    }
  }

  $form['tenuto_cmf_chair_name'] = array(
    '#type' => 'textfield',
    '#title' => 'Chair name',
    '#description' => 'Enter the name of the event chair. For more than one chair, separate names with commas.',
    '#default_value' => variable_get('tenuto_cmf_chair_name', NULL),
  );
  
  $form['tenuto_cmf_chair_email_address'] = array(
    '#type' => 'textfield',
    '#title' => 'Chair email',
    '#description' => 'Enter the email address of the event chair. For more than one chair, separate email with commas.',
    '#default_value' => variable_get('tenuto_cmf_chair_email_address', NULL),
  );
  
  $form['location_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Location'),
  );
  
  $form['location_fieldset']['tenuto_cmf_event_location'] = array(
    '#type' => 'textarea',
    '#title' => t('Location for the Constance Murray Piano Festival'),
    '#default_value' => variable_get('tenuto_cmf_event_location', ''),
  );
  
  $form['event_date_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Date'),
  );
  $form['event_date_fieldset']['tenuto_cmf_event_date'] = array(
     '#type' => 'date_select', 
     '#title' => t('Select a date for the Constance Murray Piano Festival'),
     '#description' => 'This is the date when the event will take place.',
     '#default_value' => $event_date, 
     '#date_format' => 'm-d-Y',
  );
  
  $form['deadline_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Deadline'),
  );
  $form['deadline_fieldset']['tenuto_cmf_form_deadline'] = array(
     '#type' => 'date_select', 
     '#title' => t('Select a registration deadline'),
     '#description' => 'The forms will stop accepting registrations after this deadline.',
     '#default_value' => $deadline, 
     '#date_format' => $format,
  );
  
  $form['cutoff_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Cutoff'),
  );
  $form['cutoff_fieldset']['tenuto_cmf_form_cutoff'] = array(
     '#type' => 'date_select', 
     '#title' => t('Select an age cutoff date for recital'),
     '#description' => 'This is the date used to calculate the age of the student and the length of study with current teacher. Often this is either the same as the deadline, or the date of the event.',
     '#default_value' => $cutoff, 
     '#date_format' => $format,
  );
  
  $form['email_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Confirmation Email'),
  );
  
  $form['email_fieldset']['tenuto_cmf_email_confirmation_text'] = array(
    '#type' => 'text_format',
    '#title' => t('Confirmation email text'),
    '#default_value' => variable_get('tenuto_cmf_email_confirmation_text', ''),
    '#rows' => 9,
  );
  
  $form['scheduling_email_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Scheduling Email'),
  );
  $form['scheduling_email_fieldset']['tenuto_cmf_email_scheduling_text'] = array(
    '#type' => 'text_format',
    '#title' => t('Scheduling email text'),
    '#default_value' => variable_get('tenuto_cmf_email_scheduling_text', ''),
    '#rows' => 9,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#weight'=> 99,
  );
  return $form;
}
/**
 * Submit handler
 */
function mlmta_cmf_forms_configuration_form_submit($form, &$form_state) {
  $uts = strtotime($form_state['values']['tenuto_cmf_form_deadline']);
  $cutoff = strtotime($form_state['values']['tenuto_cmf_form_cutoff']);
  $event_date = strtotime($form_state['values']['tenuto_cmf_event_date']);
  
  variable_set('tenuto_cmf_form_deadline', $uts);
  variable_set('tenuto_cmf_form_cutoff', $cutoff);
  variable_set('tenuto_cmf_event_date', $event_date);
  variable_set('tenuto_cmf_event_location', $form_state['values']['tenuto_cmf_event_location']);
  variable_set('tenuto_cmf_email_confirmation_text', $form_state['values']['tenuto_cmf_email_confirmation_text']['value']);
  variable_set('tenuto_cmf_email_scheduling_text', $form_state['values']['tenuto_cmf_email_scheduling_text']['value']);
  variable_set('tenuto_cmf_chair_email_address', $form_state['values']['tenuto_cmf_chair_email_address']);
  variable_set('tenuto_cmf_chair_name', $form_state['values']['tenuto_cmf_chair_name']);
  
  if (isset($form_state['values']['tenuto_cmf_event'])) {
    variable_set('tenuto_cmf_event', $form_state['values']['tenuto_cmf_event']);
    $event = event_load($form_state['values']['tenuto_cmf_event']);
    $event->cutoff = $cutoff;
    $event->deadline = $uts;
    $event_wrapper = entity_metadata_wrapper('event', $event);
    $event_wrapper->field_event_date = $event_date;
    $event_wrapper->field_event_location = $form_state['values']['tenuto_cmf_event_location'];
    $event_wrapper->field_chair_name =  $form_state['values']['tenuto_cmf_chair_name'];
    $event_wrapper->field_chair_email_address =  $form_state['values']['tenuto_cmf_chair_email_address'];
    event_save($event);   
  }
  drupal_set_message(t('The settings have been saved.'));
}

/**
 * Implements hook_token_info().
 *
 * Creates token replacements for the solo site
 */
function mlmta_cmf_forms_token_info() {
  $tokens = array();
  $tokens['tokens']['site']['tenuto-cmf-event'] = array(
    'name' => t('Tenuto system event linked to the CMF forms'),
    'description' => t('The event ID linked to the CMF forms.'),
  );
  $tokens['tokens']['site']['tenuto-cmf-email-confirmation-text'] = array(
    'name' => t('Tenuto system email confirmation text'),
    'description' => t('Text to be inserted in the email confirmation above the order summary.'),
  );
  $tokens['tokens']['site']['tenuto-cmf-email-scheduling-text'] = array(
    'name' => t('Tenuto system email scheduling text'),
    'description' => t('Text to be inserted in the scheduling email above the order summary.'),
  );
  $tokens['tokens']['site']['tenuto-cmf-form-deadline'] = array(
    'name' => t('Tenuto system form deadline'),
    'description' => t('The deadline for a form, expressed as mm/dd/yy hh:mm AM.'),
  );
  $tokens['tokens']['site']['tenuto-cmf-event_date'] = array(
    'name' => t('Tenuto system date'),
    'description' => t('The date for the event.'),
  );
  $tokens['tokens']['site']['tenuto-cmf-event_location'] = array(
    'name' => t('Tenuto system event location'),
    'description' => t('The location of the vent.'),
  );
  $tokens['tokens']['site']['tenuto-cmf-chair-name'] = array(
    'name' => t('Tenuto system event chair name'),
    'description' => t('The chair name of the event.'),
  );
  $tokens['tokens']['site']['tenuto-cmf-chair-email-address'] = array(
    'name' => t('Tenuto system event chair email'),
    'description' => t('The chair email for the event.'),
  );
  return $tokens;
}

/**
 * Implements hook_tokens()
 * Provides value for token
 */
function mlmta_cmf_forms_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'site') {
    $sanitize = !empty($options['sanitize']);
    // Loop through the available tokens.
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'tenuto-cmf-email-confirmation-text':
          $value = variable_get('tenuto_cmf_email_confirmation_text','');
          $value = $sanitize ? filter_xss(token_replace($value)) : token_replace($value);
          $replacements[$original] = $value;
          break;
        case 'tenuto-cmf-email-scheduling-text':
          $value = variable_get('tenuto_cmf_email_scheduling_text','');
          $value = $sanitize ? filter_xss(token_replace($value)) : token_replace($value);
          $replacements[$original] = $value;
          break;
        case 'tenuto-cmf-form-deadline':
          $value = format_date(variable_get('tenuto_cmf_form_deadline','1577854800'), 'custom', 'm/d/Y h:i A');
          $replacements[$original] = $value;
          break;
        case 'tenuto-cmf-event':
          $value = variable_get('tenuto_cmf_event', 0);
          $replacements[$original] = $value;
          break;
        case 'tenuto-cmf-event-date':
          $value = format_date(variable_get('tenuto_cmf_event_date','1577854800'), 'custom', 'm/d/Y');
          $replacements[$original] = $value;
          break;
        case 'tenuto-cmf-event-location':
          $value = variable_get('tenuto_cmf_event_location','');
          $value = $sanitize ? filter_xss($value) : $value;
          $replacements[$original] = $value;
          break;
        case 'tenuto-cmf-chair-name':
          $value = variable_get('tenuto_cmf_chair_name', '');
          $value = $sanitize ? filter_xss($value) : $value;
          $replacements[$original] = $value;
          break;
        case 'tenuto-cmf-chair-email-address':
          $value = variable_get('tenuto_cmf_chair_email_address', '');
          $value = $sanitize ? filter_xss($value) : $value;
          $replacements[$original] = $value;
          break;        
      }
    }
    return $replacements;
  }
}

/**
 * Implements hook_message_presave().
 *
 * Embeds a view in the notification email for solo registrations
 */

function mlmta_cmf_forms_message_presave($message) {
  if (!empty($message->mid) || $message->type != 'commerce_order_cmf_confirmation' ) { // @todo Create message type
    return;
  }

  $message->arguments['!cmf-order-summary'] = array(
    'callback' => 'mlmta_cmf_forms_message_order_summary', 
    'pass message' => TRUE,
  );
}

/**
 * Message solo callback; Show order summary.
 *
 * @param Message $message
 *   The Message entity.
 *
 * @return string
 *   The output of the View.
 */
function mlmta_cmf_forms_message_order_summary(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);
  $view = views_get_view('shopping_cart_complete_summary'); 
  $view->set_display('cmf'); // @todo Create views display for CMF
  $view->set_arguments(array($wrapper->message_commerce_order->getIdentifier()));
  $view->hide_admin_links = TRUE;

  // Disable SQL query rewrite so this renders properly for token.
  // @link https://www.drupal.org/node/1895418
  // This line doesn't seem to work for non-admins! I had to manually disable SQL rewrite for the views
  $view->display['recital']->display_options['query']['options']['disable_sql_rewrite'] = TRUE;

  return $view->preview();
}


///**
// * Creates a map of instruments
// */
//function mlmta_cmf_forms_instruments() {
//  return drupal_map_assoc(array(
//    'Piano', 'Voice', 'Violin', 'Viola', 'Cello', 'Bass', 'Guitar', 'Harp', 'Flute', 'Oboe', 'Clarinet', 'Bassoon', 'French horn', 'English horn', 'Saxophone' ,'Trumpet', 'Trombone', 'Euphonium', 'Tuba', 'Percussion', 'Marimba', 'Vibraphone',  
//  ));
//}

///**
// * Outputs a html file with .doc extension. Outputs the student recital program
// */
//function mlmta_cmf_output_program() {
//  $content = views_embed_view('mlmta_cmf_program','page');
//  //add necessary headers for browsers
//  $filename = 'RecitalProgram-'.date('Ymd-Hi').'.doc';
//  drupal_add_http_header('Content-Type', 'application/vnd.ms-word; utf-8'); 
////  drupal_add_http_header("Cache-Control: must-revalidate, post-check=0, pre-check=0"); 
//  drupal_add_http_header('Content-Disposition',  'attachment;filename= "'.$filename.'"');
//  print $content;
//  drupal_exit();
//}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the rearrange view form to add recalculation THIS NEEDS TO MOVE TO INDIVIDUAL SYSTEMS DUE TO MULTIPLE FORM NAMES
 */
function timeblock_form_views_form_pursuits_1_cmf_rearrange_alter(&$form, &$form_state) { //@todo Create pursuit_1_cmf View
  $form['#submit'][] = 'timeblock_trigger_recalculation_callback';
}
